
*****************************************************
Summary
-------
Generated at: 2018-02-06T17:07:45+08:00
Notes: 2
Binaries: 15
Archives: 6
Standards: 336

Apache Licensed: 137
Generated Documents: 0

JavaDocs are generated and so license header is optional
Generated files do not required license headers

199 Unknown Licenses

*******************************

Unapproved licenses:

  ./.gitignore
  ./.travis.yml
  ./DEPENDENCIES.md
  ./Dockerfile
  ./Makefile
  ./gradlew
  ./rat_report.txt
  ./Godeps/Godeps.json
  ./ansible/environments/local/hosts
  ./ansible/environments/local/group_vars/all
  ./docs/creating_tagged_releases.md
  ./docs/programming_guide.md
  ./docs/wskdeploy_action_advanced_parms.md
  ./docs/wskdeploy_action_env_var_parms.md
  ./docs/wskdeploy_action_fixed_parms.md
  ./docs/wskdeploy_action_helloworld.md
  ./docs/wskdeploy_action_runtime.md
  ./docs/wskdeploy_action_typed_parms.md
  ./docs/wskdeploy_configuring.md
  ./docs/wskdeploy_debugging.md
  ./docs/wskdeploy_example_template.md
  ./docs/wskdeploy_faq.md
  ./docs/wskdeploy_package_minimal.md
  ./docs/wskdeploy_sequence_basic.md
  ./docs/wskdeploy_triggerrule_basic.md
  ./docs/wskdeploy_triggerrule_trigger_bindings.md
  ./docs/examples/deployment_hello_world_triggerrule_bindings.yaml
  ./docs/examples/deployment_hello_world_triggerrule_unbound.yaml
  ./docs/examples/manifest_hello_world.yaml
  ./docs/examples/manifest_hello_world_advanced_parms.yaml
  ./docs/examples/manifest_hello_world_env_var_parms.yaml
  ./docs/examples/manifest_hello_world_fixed_parms.yaml
  ./docs/examples/manifest_hello_world_runtime.yaml
  ./docs/examples/manifest_hello_world_triggerrule.yaml
  ./docs/examples/manifest_hello_world_triggerrule_unbound.yaml
  ./docs/examples/manifest_hello_world_typed_parms.yaml
  ./docs/examples/manifest_package_minimal.yaml
  ./docs/examples/manifest_sequence_basic.yaml
  ./specification/diagrams/README.md
  ./specification/html/spec_actions.md
  ./specification/html/spec_index.md
  ./specification/html/spec_normative_refs.md
  ./specification/html/spec_packages.md
  ./specification/html/spec_parameters.md
  ./specification/html/spec_sequences.md
  ./specification/html/spec_shared_entity_schema.md
  ./specification/html/spec_trigger_rule.md
  ./specification/html/spec_types.md
  ./specification/images/images.md
  ./tests/README.md
  ./tests/apps/openwhisk-githubslackbot/README.md
  ./tests/apps/openwhisk-githubslackbot/manifest.yaml
  ./tests/apps/owbp-cloudant-trigger/README.md
  ./tests/apps/owbp-cloudant-trigger/manifest-bp.json
  ./tests/apps/owbp-cloudant-trigger/runtimes/node/manifest.yaml
  ./tests/apps/owbp-cloudant-trigger/runtimes/php/manifest.yaml
  ./tests/apps/owbp-cloudant-trigger/runtimes/php/actions/process-change.php
  ./tests/apps/owbp-cloudant-trigger/runtimes/python/manifest.yaml
  ./tests/apps/owbp-cloudant-trigger/runtimes/swift/manifest.yaml
  ./tests/apps/owbp-cloudant-trigger/runtimes/swift/actions/process-change.swift
  ./tests/dat/deployment-deploymentreader-test-package.yml
  ./tests/dat/deployment-deploymentreader-test-packages.yml
  ./tests/dat/deployment-deploymentreader-test.yml
  ./tests/dat/deployment_compose_trigger.yaml
  ./tests/dat/deployment_data_action_with_inputs_outputs.yaml
  ./tests/dat/deployment_data_package.yaml
  ./tests/dat/deployment_data_package_env_var.yaml
  ./tests/dat/deployment_data_packages.yaml
  ./tests/dat/deployment_data_packages_env_var.yaml
  ./tests/dat/deployment_data_project.yaml
  ./tests/dat/deployment_data_project_package.yaml
  ./tests/dat/deployment_data_project_package_env_var.yaml
  ./tests/dat/deployment_data_project_package_env_var_con.yaml
  ./tests/dat/deployment_data_project_packages_env_var.yaml
  ./tests/dat/deployment_data_project_packages_env_var_con.yaml
  ./tests/dat/deployment_validate_action_annotations.yaml
  ./tests/dat/deployment_validate_credentials.yaml
  ./tests/dat/deployment_validate_deployment_reader.yaml
  ./tests/dat/manifest_bad_yaml_invalid_comment.yaml
  ./tests/dat/manifest_bad_yaml_invalid_key_mapping_value.yaml
  ./tests/dat/manifest_bad_yaml_invalid_package_key.yaml
  ./tests/dat/manifest_bad_yaml_missing_root_key.yaml
  ./tests/dat/manifest_data_compose_triggers.yaml
  ./tests/dat/manifest_data_rule_env_var.yaml
  ./tests/dat/manifest_hello_java_jar.yaml
  ./tests/dat/manifest_hello_nodejs.yaml
  ./tests/dat/manifest_hello_nodejs_with_params.yaml
  ./tests/dat/manifest_hello_python.yaml
  ./tests/dat/manifest_hello_swift.yaml
  ./tests/dat/manifest_invalid_package_missing.yaml
  ./tests/dat/manifest_validate_action_annotations.yaml
  ./tests/dat/manifest_validate_credentials.yaml
  ./tests/dat/manifest_validate_deployment_reader.yaml
  ./tests/dat/manifest_validate_feed.yaml
  ./tests/dat/manifest_validate_json_params.yaml
  ./tests/dat/manifest_validate_multiline_params.yaml
  ./tests/dat/manifest_validate_package_grammar.yaml
  ./tests/dat/manifest_validate_package_grammar_env_var.yaml
  ./tests/dat/manifest_validate_params.yaml
  ./tests/dat/manifest_validate_rule.yaml
  ./tests/dat/manifest_validate_singleline_params.yaml
  ./tests/dat/manifest_validate_trigger_action_rule_grammar.yaml
  ./tests/dat/manifest_validate_triggerfeed.yaml
  ./tests/dat/wskprops
  ./tests/dat/wskpropsnokeycert
  ./tests/src/integration/alarmtrigger/README.md
  ./tests/src/integration/alarmtrigger/deployment.yaml
  ./tests/src/integration/alarmtrigger/manifest.yaml
  ./tests/src/integration/apigateway/manifest.yml
  ./tests/src/integration/cloudant/README.md
  ./tests/src/integration/cloudant/manifest.yaml
  ./tests/src/integration/dependency/README.md
  ./tests/src/integration/dependency/manifest.yaml
  ./tests/src/integration/flagstests/deployment.yml
  ./tests/src/integration/flagstests/manifest.yaml
  ./tests/src/integration/flagstests/manifest.yml
  ./tests/src/integration/helloworld/README.md
  ./tests/src/integration/helloworld/deployment.yaml
  ./tests/src/integration/helloworld/manifest.yaml
  ./tests/src/integration/jaraction/manifest.yaml
  ./tests/src/integration/managed-deployment/00-manifest-minus-second-package.yaml
  ./tests/src/integration/managed-deployment/01-manifest-minus-sequence-2.yaml
  ./tests/src/integration/managed-deployment/02-manifest-minus-action-3.yaml
  ./tests/src/integration/managed-deployment/03-manifest-minus-trigger.yaml
  ./tests/src/integration/managed-deployment/04-manifest-minus-package.yaml
  ./tests/src/integration/managed-deployment/manifest.yaml
  ./tests/src/integration/message-hub/README.md
  ./tests/src/integration/message-hub/deployment.yaml
  ./tests/src/integration/message-hub/manifest.yaml
  ./tests/src/integration/message-hub/src/events.json
  ./tests/src/integration/runtimetests/manifest.yaml
  ./tests/src/integration/runtimetests/src/hello.swift
  ./tests/src/integration/runtimetests/src/helloworld/package.json
  ./tests/src/integration/runtimetests/src/helloworld/node_modules/string-format/README.md
  ./tests/src/integration/runtimetests/src/helloworld/node_modules/string-format/package.json
  ./tests/src/integration/triggerrule/deployment.yml
  ./tests/src/integration/triggerrule/manifest.yml
  ./tests/src/integration/validate-action-annotations/deployment-with-invalid-annotations.yaml
  ./tests/src/integration/validate-action-annotations/deployment.yaml
  ./tests/src/integration/validate-action-annotations/manifest.yaml
  ./tests/src/integration/validate-application-and-project/deployment-with-application.yaml
  ./tests/src/integration/validate-application-and-project/deployment-with-project.yaml
  ./tests/src/integration/validate-application-and-project/manifest-with-application.yaml
  ./tests/src/integration/validate-application-and-project/manifest-with-project.yaml
  ./tests/src/integration/validate-binding-inputs-annotations/deployment.yaml
  ./tests/src/integration/validate-binding-inputs-annotations/manifest.yaml
  ./tests/src/integration/validate-manifest-deployment-file-extensions/deployment.yaml
  ./tests/src/integration/validate-manifest-deployment-file-extensions/deployment.yml
  ./tests/src/integration/validate-manifest-deployment-file-extensions/manifest.yaml
  ./tests/src/integration/validate-manifest-deployment-file-extensions/manifest.yml
  ./tests/src/integration/validate-manifest-deployment-file-extensions/not-standard-deployment.yaml
  ./tests/src/integration/validate-manifest-deployment-file-extensions/not-standard-manifest.yaml
  ./tests/src/integration/validate-manifest-deployment-file-extensions/random-name-1.yaml
  ./tests/src/integration/validate-manifest-deployment-file-extensions/random-name-2.yaml
  ./tests/src/integration/validate-manifest-deployment-file-extensions/yaml-deployment-with-yml-manifest.yaml
  ./tests/src/integration/validate-manifest-deployment-file-extensions/yaml-manifest-with-yml-deployment.yaml
  ./tests/src/integration/validate-manifest-deployment-file-extensions/yml-deployment-with-yaml-manifest.yml
  ./tests/src/integration/validate-manifest-deployment-file-extensions/yml-manifest-with-yaml-deployment.yml
  ./tests/src/integration/validate-package-in-manifest/deployment.yaml
  ./tests/src/integration/validate-package-in-manifest/manifest.yaml
  ./tests/src/integration/validate-packages-in-manifest/deployment.yaml
  ./tests/src/integration/validate-packages-in-manifest/manifest.yaml
  ./tests/src/integration/validatePackageInDeployment/deployment.yaml
  ./tests/src/integration/validatePackageInDeployment/manifest.yaml
  ./tests/src/integration/validatePackagesInDeployment/deployment.yaml
  ./tests/src/integration/validatePackagesInDeployment/manifest.yaml
  ./tests/src/integration/webaction/manifest.yml
  ./tests/src/integration/zipaction/deployment.yml
  ./tests/src/integration/zipaction/manifest.yml
  ./tests/src/integration/zipaction/actions/cat/package.json
  ./tests/src/integration/zipaction/actions/cat/node_modules/cat/README.md
  ./tests/src/integration/zipaction/actions/cat/node_modules/cat/package.json
  ./tests/usecases/api-gateway/simple_api_manifest.yaml
  ./tests/usecases/badyaml/deployment.yaml
  ./tests/usecases/badyaml/manifest.yaml
  ./tests/usecases/dependency/README.md
  ./tests/usecases/dependency/manifest.yaml
  ./tests/usecases/github/README.md
  ./tests/usecases/github/deployment.yaml
  ./tests/usecases/github/manifest.yaml
  ./tests/usecases/slack/README.md
  ./tests/usecases/slack/deployment.yaml
  ./tests/usecases/slack/manifest.yaml
  ./tests/usecases/triggerrule/README.md
  ./tests/usecases/triggerrule/deployment.yml
  ./tests/usecases/triggerrule/manifest.yml
  ./tools/travis/docker/Dockerfile
  ./wski18n/README.md
  ./wski18n/i18n_resources.go
  ./wski18n/resources/de_DE.all.json
  ./wski18n/resources/en_US.all.json
  ./wski18n/resources/es_ES.all.json
  ./wski18n/resources/fr_FR.all.json
  ./wski18n/resources/it_IT.all.json
  ./wski18n/resources/ja_JA.all.json
  ./wski18n/resources/ko_KR.all.json
  ./wski18n/resources/pt_BR.all.json
  ./wski18n/resources/zh_Hans.all.json
  ./wski18n/resources/zh_Hant.all.json

*******************************

Archives:

 + ./gradle/wrapper/gradle-wrapper.jar
 
 + ./tests/src/integration/helloworld/actions/hello.jar
 
 + ./tests/src/integration/jaraction/src/hello.jar
 
 + ./tests/src/integration/runtimetests/src/hello.jar
 
 + ./tests/src/integration/runtimetests/src/helloworld/helloworld.zip
 
 + ./tests/src/integration/validate-packages-in-manifest/actions/hello.jar
 
*****************************************************
  Files with Apache License headers will be marked AL
  Binary files (which do not require AL headers) will be marked B
  Compressed archives will be marked A
  Notices, licenses etc will be marked N
 !????? ./.gitignore
 !????? ./.travis.yml
  AL    ./CONTRIBUTING.md
 !????? ./DEPENDENCIES.md
 !????? ./Dockerfile
  N     ./LICENSE
 !????? ./Makefile
  AL    ./README.md
  AL    ./build.gradle
  AL    ./build.sh
  AL    ./doc.go
 !????? ./gradlew
  AL    ./gradlew.bat
  AL    ./main.go
 !????? ./rat_report.txt
  B     ./wskdeploy
 !????? ./Godeps/Godeps.json
  N     ./Godeps/Readme
 !????? ./ansible/environments/local/hosts
 !????? ./ansible/environments/local/group_vars/all
  AL    ./cmd/add.go
  AL    ./cmd/init.go
  AL    ./cmd/publish.go
  AL    ./cmd/report.go
  AL    ./cmd/root.go
  AL    ./cmd/root_test.go
  AL    ./cmd/undeploy.go
  AL    ./cmd/version.go
  AL    ./deployers/deploymentreader.go
  AL    ./deployers/deploymentreader_test.go
  AL    ./deployers/filesystemreader.go
  AL    ./deployers/manifestreader.go
  AL    ./deployers/manifestreader_test.go
  AL    ./deployers/servicedeployer.go
  AL    ./deployers/whiskclient.go
  AL    ./deployers/whiskclient_test.go
 !????? ./docs/creating_tagged_releases.md
 !????? ./docs/programming_guide.md
 !????? ./docs/wskdeploy_action_advanced_parms.md
 !????? ./docs/wskdeploy_action_env_var_parms.md
 !????? ./docs/wskdeploy_action_fixed_parms.md
 !????? ./docs/wskdeploy_action_helloworld.md
 !????? ./docs/wskdeploy_action_runtime.md
 !????? ./docs/wskdeploy_action_typed_parms.md
 !????? ./docs/wskdeploy_configuring.md
 !????? ./docs/wskdeploy_debugging.md
 !????? ./docs/wskdeploy_example_template.md
 !????? ./docs/wskdeploy_faq.md
 !????? ./docs/wskdeploy_package_minimal.md
 !????? ./docs/wskdeploy_sequence_basic.md
 !????? ./docs/wskdeploy_triggerrule_basic.md
 !????? ./docs/wskdeploy_triggerrule_trigger_bindings.md
 !????? ./docs/examples/deployment_hello_world_triggerrule_bindings.yaml
 !????? ./docs/examples/deployment_hello_world_triggerrule_unbound.yaml
 !????? ./docs/examples/manifest_hello_world.yaml
 !????? ./docs/examples/manifest_hello_world_advanced_parms.yaml
 !????? ./docs/examples/manifest_hello_world_env_var_parms.yaml
 !????? ./docs/examples/manifest_hello_world_fixed_parms.yaml
 !????? ./docs/examples/manifest_hello_world_runtime.yaml
 !????? ./docs/examples/manifest_hello_world_triggerrule.yaml
 !????? ./docs/examples/manifest_hello_world_triggerrule_unbound.yaml
 !????? ./docs/examples/manifest_hello_world_typed_parms.yaml
 !????? ./docs/examples/manifest_package_minimal.yaml
 !????? ./docs/examples/manifest_sequence_basic.yaml
  AL    ./docs/examples/src/hello.js
  AL    ./docs/examples/src/hello.py
  AL    ./docs/examples/src/hello_plus.js
  AL    ./docs/examples/src/member_equip.js
  AL    ./docs/examples/src/member_join.js
  AL    ./docs/examples/src/member_process.js
  AL    ./gradle/docker.gradle
  A     ./gradle/wrapper/gradle-wrapper.jar
  AL    ./gradle/wrapper/gradle-wrapper.properties
  AL    ./parsers/deploy_parser.go
  AL    ./parsers/deploy_parser_test.go
  AL    ./parsers/manifest_parser.go
  AL    ./parsers/manifest_parser_test.go
  AL    ./parsers/parameters.go
  AL    ./parsers/yamlparser.go
  AL    ./parsers/yamlparser_test.go
  AL    ./specification/README.md
  B     ./specification/openwhisk_v0.9.1.pdf
  B     ./specification/archive/openwhisk_v0.8.1.pdf
  B     ./specification/archive/openwhisk_v0.8.2.pdf
  B     ./specification/archive/openwhisk_v0.8.3.pdf
  B     ./specification/archive/openwhisk_v0.8.4.pdf
  B     ./specification/archive/openwhisk_v0.8.5.pdf
  B     ./specification/archive/openwhisk_v0.8.6.pdf
  B     ./specification/archive/openwhisk_v0.8.7.pdf
  B     ./specification/archive/openwhisk_v0.8.8.pdf
  B     ./specification/diagrams/OW-Programming-Model-Slides-Slide1.jpg
  B     ./specification/diagrams/OW-Programming-Model-Slides-Slide2.jpg
  B     ./specification/diagrams/OW-Programming-Model-Slides.pptx
 !????? ./specification/diagrams/README.md
 !????? ./specification/html/spec_actions.md
 !????? ./specification/html/spec_index.md
 !????? ./specification/html/spec_normative_refs.md
 !????? ./specification/html/spec_packages.md
 !????? ./specification/html/spec_parameters.md
 !????? ./specification/html/spec_sequences.md
 !????? ./specification/html/spec_shared_entity_schema.md
 !????? ./specification/html/spec_trigger_rule.md
 !????? ./specification/html/spec_types.md
  B     ./specification/images/OpenWhisk - Conceptual Manifest File Creation.png
  B     ./specification/images/OpenWhisk - Conceptual Manifest File Deployment.png
 !????? ./specification/images/images.md
 !????? ./tests/README.md
 !????? ./tests/apps/openwhisk-githubslackbot/README.md
 !????? ./tests/apps/openwhisk-githubslackbot/manifest.yaml
  AL    ./tests/apps/openwhisk-githubslackbot/actions/find-delayed-pull-requests.js
  AL    ./tests/apps/openwhisk-githubslackbot/actions/post-to-slack.js
  AL    ./tests/apps/openwhisk-githubslackbot/actions/track-pull-requests.js
 !????? ./tests/apps/owbp-cloudant-trigger/README.md
 !????? ./tests/apps/owbp-cloudant-trigger/manifest-bp.json
  AL    ./tests/apps/owbp-cloudant-trigger/owbp-cloudant-trigger_test.go
 !????? ./tests/apps/owbp-cloudant-trigger/runtimes/node/manifest.yaml
  AL    ./tests/apps/owbp-cloudant-trigger/runtimes/node/actions/process-change.js
 !????? ./tests/apps/owbp-cloudant-trigger/runtimes/php/manifest.yaml
 !????? ./tests/apps/owbp-cloudant-trigger/runtimes/php/actions/process-change.php
 !????? ./tests/apps/owbp-cloudant-trigger/runtimes/python/manifest.yaml
  AL    ./tests/apps/owbp-cloudant-trigger/runtimes/python/actions/process-change.py
 !????? ./tests/apps/owbp-cloudant-trigger/runtimes/swift/manifest.yaml
 !????? ./tests/apps/owbp-cloudant-trigger/runtimes/swift/actions/process-change.swift
 !????? ./tests/dat/deployment-deploymentreader-test-package.yml
 !????? ./tests/dat/deployment-deploymentreader-test-packages.yml
 !????? ./tests/dat/deployment-deploymentreader-test.yml
 !????? ./tests/dat/deployment_compose_trigger.yaml
 !????? ./tests/dat/deployment_data_action_with_inputs_outputs.yaml
 !????? ./tests/dat/deployment_data_package.yaml
 !????? ./tests/dat/deployment_data_package_env_var.yaml
 !????? ./tests/dat/deployment_data_packages.yaml
 !????? ./tests/dat/deployment_data_packages_env_var.yaml
 !????? ./tests/dat/deployment_data_project.yaml
 !????? ./tests/dat/deployment_data_project_package.yaml
 !????? ./tests/dat/deployment_data_project_package_env_var.yaml
 !????? ./tests/dat/deployment_data_project_package_env_var_con.yaml
 !????? ./tests/dat/deployment_data_project_packages_env_var.yaml
 !????? ./tests/dat/deployment_data_project_packages_env_var_con.yaml
 !????? ./tests/dat/deployment_validate_action_annotations.yaml
 !????? ./tests/dat/deployment_validate_credentials.yaml
 !????? ./tests/dat/deployment_validate_deployment_reader.yaml
 !????? ./tests/dat/manifest_bad_yaml_invalid_comment.yaml
 !????? ./tests/dat/manifest_bad_yaml_invalid_key_mapping_value.yaml
 !????? ./tests/dat/manifest_bad_yaml_invalid_package_key.yaml
 !????? ./tests/dat/manifest_bad_yaml_missing_root_key.yaml
 !????? ./tests/dat/manifest_data_compose_triggers.yaml
 !????? ./tests/dat/manifest_data_rule_env_var.yaml
 !????? ./tests/dat/manifest_hello_java_jar.yaml
 !????? ./tests/dat/manifest_hello_nodejs.yaml
 !????? ./tests/dat/manifest_hello_nodejs_with_params.yaml
 !????? ./tests/dat/manifest_hello_python.yaml
 !????? ./tests/dat/manifest_hello_swift.yaml
 !????? ./tests/dat/manifest_invalid_package_missing.yaml
 !????? ./tests/dat/manifest_validate_action_annotations.yaml
 !????? ./tests/dat/manifest_validate_credentials.yaml
 !????? ./tests/dat/manifest_validate_deployment_reader.yaml
 !????? ./tests/dat/manifest_validate_feed.yaml
 !????? ./tests/dat/manifest_validate_json_params.yaml
 !????? ./tests/dat/manifest_validate_multiline_params.yaml
 !????? ./tests/dat/manifest_validate_package_grammar.yaml
 !????? ./tests/dat/manifest_validate_package_grammar_env_var.yaml
 !????? ./tests/dat/manifest_validate_params.yaml
 !????? ./tests/dat/manifest_validate_rule.yaml
 !????? ./tests/dat/manifest_validate_singleline_params.yaml
 !????? ./tests/dat/manifest_validate_trigger_action_rule_grammar.yaml
 !????? ./tests/dat/manifest_validate_triggerfeed.yaml
 !????? ./tests/dat/wskprops
 !????? ./tests/dat/wskpropsnokeycert
  AL    ./tests/dat/actions/dump_params.js
  AL    ./tests/dat/actions/hello.js
 !????? ./tests/src/integration/alarmtrigger/README.md
  AL    ./tests/src/integration/alarmtrigger/alarmtrigger_test.go
 !????? ./tests/src/integration/alarmtrigger/deployment.yaml
 !????? ./tests/src/integration/alarmtrigger/manifest.yaml
  AL    ./tests/src/integration/alarmtrigger/actions/hello.js
  AL    ./tests/src/integration/apigateway/apigateway_test.go
 !????? ./tests/src/integration/apigateway/manifest.yml
  AL    ./tests/src/integration/apigateway/src/greeting.js
 !????? ./tests/src/integration/cloudant/README.md
  AL    ./tests/src/integration/cloudant/cloudant_test.go
 !????? ./tests/src/integration/cloudant/manifest.yaml
  AL    ./tests/src/integration/cloudant/actions/process-change.js
  AL    ./tests/src/integration/common/wskdeploy.go
  AL    ./tests/src/integration/common/wskprops.go
 !????? ./tests/src/integration/dependency/README.md
  AL    ./tests/src/integration/dependency/dependency_test.go
 !????? ./tests/src/integration/dependency/manifest.yaml
 !????? ./tests/src/integration/flagstests/deployment.yml
  AL    ./tests/src/integration/flagstests/flags_test.go
 !????? ./tests/src/integration/flagstests/manifest.yaml
 !????? ./tests/src/integration/flagstests/manifest.yml
  AL    ./tests/src/integration/flagstests/src/greeting.js
 !????? ./tests/src/integration/helloworld/README.md
 !????? ./tests/src/integration/helloworld/deployment.yaml
  AL    ./tests/src/integration/helloworld/helloworld_test.go
 !????? ./tests/src/integration/helloworld/manifest.yaml
  AL    ./tests/src/integration/helloworld/actions/Hello.java
  A     ./tests/src/integration/helloworld/actions/hello.jar
  AL    ./tests/src/integration/helloworld/actions/hello.js
  AL    ./tests/src/integration/helloworld/actions/hello.py
  AL    ./tests/src/integration/helloworld/actions/hello.swift
  AL    ./tests/src/integration/jaraction/jaraction_test.go
 !????? ./tests/src/integration/jaraction/manifest.yaml
  AL    ./tests/src/integration/jaraction/src/Hello.java
  A     ./tests/src/integration/jaraction/src/hello.jar
 !????? ./tests/src/integration/managed-deployment/00-manifest-minus-second-package.yaml
 !????? ./tests/src/integration/managed-deployment/01-manifest-minus-sequence-2.yaml
 !????? ./tests/src/integration/managed-deployment/02-manifest-minus-action-3.yaml
 !????? ./tests/src/integration/managed-deployment/03-manifest-minus-trigger.yaml
 !????? ./tests/src/integration/managed-deployment/04-manifest-minus-package.yaml
  AL    ./tests/src/integration/managed-deployment/managed-deployment_test.go
 !????? ./tests/src/integration/managed-deployment/manifest.yaml
  AL    ./tests/src/integration/managed-deployment/actions/hello.js
 !????? ./tests/src/integration/message-hub/README.md
 !????? ./tests/src/integration/message-hub/deployment.yaml
 !????? ./tests/src/integration/message-hub/manifest.yaml
  AL    ./tests/src/integration/message-hub/message-hub_test.go
 !????? ./tests/src/integration/message-hub/src/events.json
  AL    ./tests/src/integration/message-hub/src/process-messages.js
  AL    ./tests/src/integration/message-hub/src/receive-messages.js
 !????? ./tests/src/integration/runtimetests/manifest.yaml
  AL    ./tests/src/integration/runtimetests/runtimes_test.go
  AL    ./tests/src/integration/runtimetests/src/Hello.java
  AL    ./tests/src/integration/runtimetests/src/greeting.js
  A     ./tests/src/integration/runtimetests/src/hello.jar
  AL    ./tests/src/integration/runtimetests/src/hello.php
  AL    ./tests/src/integration/runtimetests/src/hello.py
 !????? ./tests/src/integration/runtimetests/src/hello.swift
  A     ./tests/src/integration/runtimetests/src/helloworld/helloworld.zip
  AL    ./tests/src/integration/runtimetests/src/helloworld/index.js
 !????? ./tests/src/integration/runtimetests/src/helloworld/package.json
 !????? ./tests/src/integration/runtimetests/src/helloworld/node_modules/string-format/README.md
 !????? ./tests/src/integration/runtimetests/src/helloworld/node_modules/string-format/package.json
  AL    ./tests/src/integration/runtimetests/src/helloworld/node_modules/string-format/lib/string-format.js
 !????? ./tests/src/integration/triggerrule/deployment.yml
 !????? ./tests/src/integration/triggerrule/manifest.yml
  AL    ./tests/src/integration/triggerrule/triggerrule_test.go
  AL    ./tests/src/integration/triggerrule/src/greeting.js
 !????? ./tests/src/integration/validate-action-annotations/deployment-with-invalid-annotations.yaml
 !????? ./tests/src/integration/validate-action-annotations/deployment.yaml
 !????? ./tests/src/integration/validate-action-annotations/manifest.yaml
  AL    ./tests/src/integration/validate-action-annotations/validate-action-annotations_test.go
  AL    ./tests/src/integration/validate-action-annotations/actions/hello.js
 !????? ./tests/src/integration/validate-application-and-project/deployment-with-application.yaml
 !????? ./tests/src/integration/validate-application-and-project/deployment-with-project.yaml
 !????? ./tests/src/integration/validate-application-and-project/manifest-with-application.yaml
 !????? ./tests/src/integration/validate-application-and-project/manifest-with-project.yaml
  AL    ./tests/src/integration/validate-application-and-project/validate-application-and-project_test.go
  AL    ./tests/src/integration/validate-application-and-project/actions/hello.js
 !????? ./tests/src/integration/validate-binding-inputs-annotations/deployment.yaml
 !????? ./tests/src/integration/validate-binding-inputs-annotations/manifest.yaml
  AL    ./tests/src/integration/validate-binding-inputs-annotations/validate-bind-inputs-anno_test.go
  AL    ./tests/src/integration/validate-binding-inputs-annotations/actions/helloworld.js
 !????? ./tests/src/integration/validate-manifest-deployment-file-extensions/deployment.yaml
 !????? ./tests/src/integration/validate-manifest-deployment-file-extensions/deployment.yml
 !????? ./tests/src/integration/validate-manifest-deployment-file-extensions/manifest.yaml
 !????? ./tests/src/integration/validate-manifest-deployment-file-extensions/manifest.yml
 !????? ./tests/src/integration/validate-manifest-deployment-file-extensions/not-standard-deployment.yaml
 !????? ./tests/src/integration/validate-manifest-deployment-file-extensions/not-standard-manifest.yaml
 !????? ./tests/src/integration/validate-manifest-deployment-file-extensions/random-name-1.yaml
 !????? ./tests/src/integration/validate-manifest-deployment-file-extensions/random-name-2.yaml
  AL    ./tests/src/integration/validate-manifest-deployment-file-extensions/validate-file-extensions_test.go
 !????? ./tests/src/integration/validate-manifest-deployment-file-extensions/yaml-deployment-with-yml-manifest.yaml
 !????? ./tests/src/integration/validate-manifest-deployment-file-extensions/yaml-manifest-with-yml-deployment.yaml
 !????? ./tests/src/integration/validate-manifest-deployment-file-extensions/yml-deployment-with-yaml-manifest.yml
 !????? ./tests/src/integration/validate-manifest-deployment-file-extensions/yml-manifest-with-yaml-deployment.yml
  AL    ./tests/src/integration/validate-manifest-deployment-file-extensions/actions/hello.js
 !????? ./tests/src/integration/validate-package-in-manifest/deployment.yaml
 !????? ./tests/src/integration/validate-package-in-manifest/manifest.yaml
  AL    ./tests/src/integration/validate-package-in-manifest/validate-package-in-manifest_test.go
  AL    ./tests/src/integration/validate-package-in-manifest/actions/hello.js
 !????? ./tests/src/integration/validate-packages-in-manifest/deployment.yaml
 !????? ./tests/src/integration/validate-packages-in-manifest/manifest.yaml
  AL    ./tests/src/integration/validate-packages-in-manifest/validate-packages-in-manifest_test.go
  A     ./tests/src/integration/validate-packages-in-manifest/actions/hello.jar
  AL    ./tests/src/integration/validate-packages-in-manifest/actions/hello.js
  AL    ./tests/src/integration/validate-packages-in-manifest/actions/hello.py
 !????? ./tests/src/integration/validatePackageInDeployment/deployment.yaml
 !????? ./tests/src/integration/validatePackageInDeployment/manifest.yaml
  AL    ./tests/src/integration/validatePackageInDeployment/validatePackageInDeployment_test.go
  AL    ./tests/src/integration/validatePackageInDeployment/actions/helloworld.js
 !????? ./tests/src/integration/validatePackagesInDeployment/deployment.yaml
 !????? ./tests/src/integration/validatePackagesInDeployment/manifest.yaml
  AL    ./tests/src/integration/validatePackagesInDeployment/validatePackagesInDeployment_test.go
  AL    ./tests/src/integration/validatePackagesInDeployment/actions/helloworld.js
  AL    ./tests/src/integration/validateSequencesCreation/validateSequencesCreation_test.go
  AL    ./tests/src/integration/validateSequencesCreation/actions/function.js
 !????? ./tests/src/integration/webaction/manifest.yml
  AL    ./tests/src/integration/webaction/webaction_test.go
  AL    ./tests/src/integration/webaction/src/greeting.js
 !????? ./tests/src/integration/zipaction/deployment.yml
 !????? ./tests/src/integration/zipaction/manifest.yml
  AL    ./tests/src/integration/zipaction/zipaction_test.go
  AL    ./tests/src/integration/zipaction/actions/cat/index.js
 !????? ./tests/src/integration/zipaction/actions/cat/package.json
 !????? ./tests/src/integration/zipaction/actions/cat/node_modules/cat/README.md
  AL    ./tests/src/integration/zipaction/actions/cat/node_modules/cat/bin.js
  AL    ./tests/src/integration/zipaction/actions/cat/node_modules/cat/example.js
  AL    ./tests/src/integration/zipaction/actions/cat/node_modules/cat/index.js
 !????? ./tests/src/integration/zipaction/actions/cat/node_modules/cat/package.json
 !????? ./tests/usecases/api-gateway/simple_api_manifest.yaml
  AL    ./tests/usecases/api-gateway/actions/fire/index.js
 !????? ./tests/usecases/badyaml/deployment.yaml
 !????? ./tests/usecases/badyaml/manifest.yaml
 !????? ./tests/usecases/dependency/README.md
 !????? ./tests/usecases/dependency/manifest.yaml
 !????? ./tests/usecases/github/README.md
 !????? ./tests/usecases/github/deployment.yaml
 !????? ./tests/usecases/github/manifest.yaml
  AL    ./tests/usecases/github/src/print-github-commits.js
 !????? ./tests/usecases/slack/README.md
 !????? ./tests/usecases/slack/deployment.yaml
 !????? ./tests/usecases/slack/manifest.yaml
  AL    ./tests/usecases/slack/actions/post-to-slack.js
 !????? ./tests/usecases/triggerrule/README.md
 !????? ./tests/usecases/triggerrule/deployment.yml
 !????? ./tests/usecases/triggerrule/manifest.yml
  AL    ./tests/usecases/triggerrule/src/greeting.js
  AL    ./tools/travis/build_tag_releases.sh
  AL    ./tools/travis/cloneutils.sh
  AL    ./tools/travis/scancode.sh
  AL    ./tools/travis/script.sh
 !????? ./tools/travis/docker/Dockerfile
  AL    ./tools/travis/docker/publish.sh
  AL    ./utils/conversion.go
  AL    ./utils/dependencies.go
  AL    ./utils/fileoperations.go
  AL    ./utils/fileoperations_test.go
  AL    ./utils/flags.go
  AL    ./utils/gitreader.go
  AL    ./utils/managedannotations.go
  AL    ./utils/misc.go
  AL    ./utils/misc_test.go
  AL    ./utils/qualifiedname.go
  AL    ./utils/runtimes.go
  AL    ./utils/validation.go
  AL    ./utils/validation_test.go
  AL    ./utils/webaction.go
  AL    ./wskderrors/wskdeployerror.go
  AL    ./wskderrors/wskdeployerror_test.go
  AL    ./wskenv/environment.go
  AL    ./wskenv/environment_test.go
 !????? ./wski18n/README.md
  AL    ./wski18n/detection.go
  AL    ./wski18n/i18n.go
  AL    ./wski18n/i18n_ids.go
  AL    ./wski18n/i18n_ids_test.go
 !????? ./wski18n/i18n_resources.go
 !????? ./wski18n/resources/de_DE.all.json
 !????? ./wski18n/resources/en_US.all.json
 !????? ./wski18n/resources/es_ES.all.json
 !????? ./wski18n/resources/fr_FR.all.json
 !????? ./wski18n/resources/it_IT.all.json
 !????? ./wski18n/resources/ja_JA.all.json
 !????? ./wski18n/resources/ko_KR.all.json
 !????? ./wski18n/resources/pt_BR.all.json
 !????? ./wski18n/resources/zh_Hans.all.json
 !????? ./wski18n/resources/zh_Hant.all.json
  AL    ./wskprint/console.go
 
*****************************************************
 Printing headers for files without AL header...
 
 
=======================================================================
==./.gitignore
=======================================================================
# Compiled Object files, Static and Dynamic libs (Shared Objects)
*.o
*.a
*.so

# Folders
_obj
_test

# Architecture specific extensions/prefixes
*.[568vq]
[568vq].out

*.cgo1.go
*.cgo2.c
_cgo_defun.c
_cgo_gotypes.go
_cgo_export.*

_testmain.go

*.exe
*.test
*.prof


#OS X
**/.DS_Store

#binaries
openwhisk-wskdeploy
incubator-openwhisk-wskdeploy
wskdeploy

# Go IDE
.idea
*.iml

# Gradle
.gradle
build/

#emacs
*~

=======================================================================
==./.travis.yml
=======================================================================
sudo: required
language: go
go:
- 1.8
services:
- docker
git:
  depth: 3
before_install:
- "./tools/travis/cloneutils.sh"
install:
- export DEPLOY_BUILD_READY=false
- go get -u github.com/golang/lint/golint
- go get -u github.com/stretchr/testify
- go get -u github.com/tools/godep
before_script:
- GO_FILES=$(find . -iname '*.go' -type f | grep -v /vendor/)
- test -z "$(gofmt -s -l $(echo $GO_FILES))"
script:
- echo $TRAVIS
- echo $TRAVIS_PULL_REQUEST
- echo $TRAVIS_SECURE_ENV_VARS
- printenv
- "./tools/travis/script.sh"
after_success:
- DEPLOY_BUILD_READY=true
after_script:
- make clean
before_deploy:
- export build_file_name=wskdeploy
- go get github.com/inconshreveable/mousetrap
- "./tools/travis/build_tag_releases.sh $build_file_name"
- export RELEASE_PKG_FILE=$(ls $build_file_name-*.*)
- echo "Deploying $RELEASE_PKG_FILE to GitHub releases."
deploy:
- provider: releases
  api_key:
    secure: aQGcP7XKlgZEFZ57y4RzYRHfQAM5HEdaa7Y/vTxNepIsE7zY2945qT99UJnU1hfhSjP9jO5eNlHzo+AqJoUx70+iUIhMTyOp39Qp7wb74OKolkXwcntufzP7Ocron5IYUE311tf/kic3vRb5cwoaE2lGfx5PdCuozVjgpsDbIRvV5quQzNr68Toqe+yegKwAhprYRWHPnuIqGbkfa83csqFv6m0viC/gvtFOCB9/4zGCqk/K3CKrcr/5GvnFPxJoaJNfFA6umSZ9VaJjbIJmcXGD3nU+rWP0uEpvzGKIMYhmQq/0JuUTgvh4jnnT4OVZeTh6pMaUqtWH+3HDrOiLAiLjcfeT91j7ZXPnx8LvM6SuoRlvRCuXA2FYx9mz2Vx0TWV5TMqhj3okVO/CvvnMMWwKWOUDD/nSMLy93BM40NjD7zimGjocPsGAjTT9H1PSfau3fiiMjg6iMRWjUTfNY5ra5Wgb7W5G37XaCBJDBZL77Blq/tNWdV5qW4A3l4FWnH+LwOdTdhU35Lr5JWzMuEDdkvVgEv8AQjb07P/ODtBW6z3GRv9Rslg9T9ylxkgJpXoYwdXCbtYU8GNcFdJiDpTaVHrkMeLvHrBTRrDCSnCnRFc3AxsUtLklo7R/EX1wUoX+QcAGjh/AmJ4nJVP1C09913fx96WczkRX6ANg2Mw=
  file_glob: true
  file: "${build_file_name}-*.*"
  overwrite: true
  skip_cleanup: true
  on:
    repo: apache/incubator-openwhisk-wskdeploy
    tags: true
    condition: "$DEPLOY_BUILD_READY = true"
- provider: script
  skip_cleanup: true
  script: "./tools/travis/docker/publish.sh openwhisk wskdeploy ${TRAVIS_TAG}"
  on:

=======================================================================
==./DEPENDENCIES.md
=======================================================================
# Library dependencies for openwhisk-wskdeploy tool

Like other open source projects, openwhisk-wskdeploy is dependent on open source libraries, we
list them here to assure that all code dependencies have Apache 2.0 compatible licenses.

| Library name | Licenses Type | License/Project Link |
| ------| ------ | ------ |
| jibber_jabber | Apache 2.0 | https://github.com/cloudfoundry-attic/jibber_jabber |
| color | MIT | https://github.com/fatih/color |


# Library dependencies for unit and integration testing

| Library name | Licenses Type | License/Project Link |
| ------| ------ | ------ |
| Testify | ad-hoc (Liberal)| [https://github.com/stretchr/testify/blob/master/LICENCE.txt](https://github.com/stretchr/testify/blob/master/LICENCE.txt) |
| Viper | MIT | [https://github.com/spf13/viper/blob/master/LICENSE](https://github.com/spf13/viper/blob/master/LICENSE) |

=======================================================================
==./Dockerfile
=======================================================================
FROM golang:1.8

# Install zip
RUN apt-get -y update && \
    apt-get -y install zip emacs

ENV GOPATH=/

# Download and install tools
RUN echo "Installing the godep tool"
RUN go get github.com/tools/godep

ADD . /src/github.com/apache/incubator-openwhisk-wskdeploy

# Load all of the dependencies from the previously generated/saved godep generated godeps.json file
RUN echo "Restoring Go dependencies"
RUN cd /src/github.com/apache/incubator-openwhisk-wskdeploy && /bin/godep restore -v

# All of the Go CLI binaries will be placed under a build folder
RUN rm -rf /src/github.com/apache/incubator-openwhisk-wskdeploy/build
RUN mkdir /src/github.com/apache/incubator-openwhisk-wskdeploy/build

ARG WSKDEPLOY_OS
ARG WSKDEPLOY_ARCH

# Build the Go wsk CLI binaries and compress resultant binaries
RUN chmod +x /src/github.com/apache/incubator-openwhisk-wskdeploy/build.sh
RUN cd /src/github.com/apache/incubator-openwhisk-wskdeploy/ && ./build.sh

=======================================================================
==./Makefile
=======================================================================
SOURCEDIR=.

SOURCES := $(shell find $(SOURCEDIR) -name '*.go')
BINARY=wskdeploy

VERSION=1.0.0

BUILD=`git rev-parse HEAD`

deps:
	@echo "Installing dependencies"
	godep restore -v

LDFLAGS=-ldflags "-X main.Version=`date -u '+%Y-%m-%dT%H:%M:%S'` -X main.Build=`git rev-parse HEAD` "

test: deps
	@echo "Testing"
	go test ./... -tags=unit

# Build the project
build: test
	go build ${LDFLAGS} -o ${BINARY}

# Run the integration test against OpenWhisk
integration_test:
	@echo "Launch the integration tests."
	go test -v ./... -tags=integration

format:
	@echo "Formatting"
	go fmt ./...

lint: format
	@echo "Linting"
	golint .

install:
	go install

# Cleans our project: deletes binaries
clean:
	if [ -f ${BINARY} ] ; then rm ${BINARY}; fi

.PHONY: clean install build deps updatedeps format lint test integration_test

=======================================================================
==./gradlew
=======================================================================
#!/usr/bin/env sh

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS=""

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn ( ) {
    echo "$*"
}

die ( ) {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false

=======================================================================
==./rat_report.txt
=======================================================================

=======================================================================
==./Godeps/Godeps.json
=======================================================================
{
	"ImportPath": "github.com/apache/incubator-openwhisk-wskdeploy",
	"GoVersion": "go1.7",
	"GodepVersion": "v62",
	"Deps": [
		{
			"ImportPath": "github.com/cloudfoundry/jibber_jabber",
			"Rev": "bcc4c8345a21301bf47c032ff42dd1aae2fe3027"
		},
		{
			"ImportPath": "github.com/fatih/color",
			"Comment": "v1.5.0",
			"Rev": "570b54cabe6b8eb0bc2dfce68d964677d63b5260"
		},
		{
			"ImportPath": "github.com/fsnotify/fsnotify",
			"Comment": "v1.4.2-2-gfd9ec7d",
			"Rev": "fd9ec7deca8bf46ecd2a795baaacf2b3a9be1197"
		},
		{
			"ImportPath": "github.com/google/go-querystring/query",
			"Rev": "9235644dd9e52eeae6fa48efd539fdc351a0af53"
		},
		{
			"ImportPath": "github.com/hashicorp/hcl",
			"Rev": "973f376f0e7cf09c96e445b44712416c0cb22ec4"
		},
		{
			"ImportPath": "github.com/hashicorp/hcl/hcl/ast",
			"Rev": "973f376f0e7cf09c96e445b44712416c0cb22ec4"
		},
		{
			"ImportPath": "github.com/hashicorp/hcl/hcl/parser",
			"Rev": "973f376f0e7cf09c96e445b44712416c0cb22ec4"
		},
		{
			"ImportPath": "github.com/hashicorp/hcl/hcl/scanner",
			"Rev": "973f376f0e7cf09c96e445b44712416c0cb22ec4"
		},
		{
			"ImportPath": "github.com/hashicorp/hcl/hcl/strconv",
			"Rev": "973f376f0e7cf09c96e445b44712416c0cb22ec4"
		},
		{
			"ImportPath": "github.com/hashicorp/hcl/hcl/token",
			"Rev": "973f376f0e7cf09c96e445b44712416c0cb22ec4"
		},
		{
			"ImportPath": "github.com/hashicorp/hcl/json/parser",
			"Rev": "973f376f0e7cf09c96e445b44712416c0cb22ec4"

=======================================================================
==./ansible/environments/local/hosts
=======================================================================
; the first parameter in a host is the inventory_hostname

; used for local actions only
ansible ansible_connection=local

[edge]
172.17.0.1          ansible_host=172.17.0.1 ansible_connection=local

[controllers]
controller0         ansible_host=172.17.0.1 ansible_connection=local

[kafkas]
kafka0              ansible_host=172.17.0.1 ansible_connection=local

[zookeepers:children]
kafkas

[invokers]
invoker0            ansible_host=172.17.0.1 ansible_connection=local

; db group is only used if db_provider is CouchDB
[db]
172.17.0.1          ansible_host=172.17.0.1 ansible_connection=local

[redis]
172.17.0.1          ansible_host=172.17.0.1 ansible_connection=local

[apigateway]
172.17.0.1          ansible_host=172.17.0.1 ansible_connection=local

=======================================================================
==./ansible/environments/local/group_vars/all
=======================================================================
whisk_version_name: local
config_root_dir: /tmp/wskconf
whisk_logs_dir: /tmp/wsklogs
docker_registry: ""
docker_dns: ""

db_prefix: whisk_local_

# Auto lookup to find the db credentials
db_provider: "{{ lookup('ini', 'db_provider section=db_creds file={{ playbook_dir }}/db_local.ini') }}"
db_username: "{{ lookup('ini', 'db_username section=db_creds file={{ playbook_dir }}/db_local.ini') }}"
db_password: "{{ lookup('ini', 'db_password section=db_creds file={{ playbook_dir }}/db_local.ini') }}"
db_protocol: "{{ lookup('ini', 'db_protocol section=db_creds file={{ playbook_dir }}/db_local.ini') }}"
db_host: "{{ lookup('ini', 'db_host section=db_creds file={{ playbook_dir }}/db_local.ini') }}"
db_port: "{{ lookup('ini', 'db_port section=db_creds file={{ playbook_dir }}/db_local.ini') }}"

# API GW connection configuration
apigw_auth_user: ""
apigw_auth_pwd: ""
apigw_host_v2: "http://{{ groups['apigateway']|first }}:{{apigateway.port.api}}/v2"

controller_arguments: '-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.port=1098'
invoker_arguments: "{{ controller_arguments }}"

invoker_allow_multiple_instances: true

# Set kafka topic retention
kafka_heap: '512m'
kafka_topics_completed_retentionBytes: 104857600
kafka_topics_completed_retentionMS: 300000
kafka_topics_health_retentionBytes: 104857600
kafka_topics_health_retentionMS: 300000
kafka_topics_invoker_retentionBytes: 104857600
kafka_topics_invoker_retentionMS: 300000

=======================================================================
==./docs/creating_tagged_releases.md
=======================================================================
# Creating Tagged Releases of ```wskdeploy```

The most convenient way to create a tagged release for wskdeploy is to build the binaries by adding tag to upstream master.


1. Add a tag to a commit id: ```git tag -a 0.8.9<tag> c08b0f<commit id>```
2. Push the tag upstream: ```git push -f upstream 0.8.9<tag>```

Travis will start the build of 0.8.9 automatically by the event of tag creation.

If the travis build passed, binaries will be pushed into releases page.

If we modify the tag by pointing to a different commit, use ```git push -f upstream 0.8.9<tag>``` to overwrite the old tag. New binaries from travis build will overwrite the old binaries as well.

You can download the binaries, and delete them from the releases page in GitHub if we do not want them to be public.

=======================================================================
==./docs/programming_guide.md
=======================================================================
# ```wskdeploy``` utility by example
_A step-by-step guide for deploying Apache OpenWhisk applications using Package Manifest files._

This guide will walk you through how to describe OpenWhisk applications and packages using the [OpenWhisk Packaging Specification](https://github.com/apache/incubator-openwhisk-wskdeploy/tree/master/specification#openwhisk-packaging-specification) and deploy them through the Whisk Deploy (```wskdeploy```) utility. Please use the specification as the ultimate reference for all Manifest file grammar and syntax.

## Getting started

### Setting up your Host and Credentials
In order to deploy your OpenWhisk package, at minimum, the ```wskdeploy``` utility needs valid OpenWhisk APIHOST and AUTH variable to attempt deployment. Please read the [Configuring wskdeploy](wskdeploy_configuring.md#configuring-wskdeploy)

### Debugging your Package Manifests
In addition to the normal output the ```wskdeploy``` utility provides, you may enable additional information that may further assist you in debugging. Please read the [Debugging Whisk Deploy](wskdeploy_debugging.md#debugging-wskdeploy) document.

### FAQ for ```wskdeploy```
Answers to Frequently Asked Questions may be found in the [wskdeploy utility FAQ](wskdeploy_faq.md).

---

# Guided Examples

Below is the list of "guided examples" where you can start by "Creating a 'hello world' application" and traverse through each example or jump to any example that interests you.

Each example shows the "code", that is the Package Manifest, Deployment file and Actions that will be used to deploy that application or package, as well as discusses the interesting features the example is highlighting.

- Package examples
  - [Creating a minimal Package](wskdeploy_package_minimal.md#packages) - creating a basic package manifest and deploying it.
- Action examples
  - [The "Hello World" Action](wskdeploy_action_helloworld.md#actions) - deploy a "hello world" JavaScript function using a manifest.
  - [Setting your Function's runtime](wskdeploy_action_runtime.md#actions) - explicitly set the runtime language and version to deplly your action onto.
  - [Adding fixed input parameters](wskdeploy_action_fixed_parms.md#actions) - bind fixed values to the input parameters of "hello world".
  - [Typed Parameters](wskdeploy_action_typed_parms.md#actions) - declare named input and output parameters on an Action with their types.
  - [Advanced Parameters](wskdeploy_action_advanced_parms.md#actions) - input and output parameter declarations with types, descriptions, defaults and more.
  - [Using Environment Variables](wskdeploy_action_env_var_parms.md#actions) - reference values from environment variables and bind them to an Action's input parameters.
- Sequences examples
  - [Sequencing Actions together](wskdeploy_sequence_basic.md#sequences) - sequence three actions together to process and augment data.
- Trigger and Rule examples
  - [Basic Trigger and Rule](wskdeploy_triggerrule_basic.md#triggers-and-rules) - adding a basic trigger and rule to the advanced Parameter "hello world".
  - [Binding parameters in a Deployment file](wskdeploy_triggerrule_trigger_bindings.md#triggers-and-rules) - using a deployment file to bind values to a Trigger’s parameters and applying them to a compatible manifest file.

---
<!--
 Bottom Navigation
-->
<html>
<div align="center">
<table align="center">
  <tr>
    <td><a>&lt;&lt;&nbsp;previous</a></td>
    <td><a href="programming_guide.md#guided-examples">Example Index</a></td>
    <td><a href="wskdeploy_package_minimal.md#packages">next&nbsp;&gt;&gt;</a></td>

=======================================================================
==./docs/wskdeploy_action_advanced_parms.md
=======================================================================
# Actions

## Advanced parameters

This example builds on the previous [“Hello world" with typed input and output parameters](wskdeploy_action_typed_parms.md#actions) example with more robust input and output parameter declarations by using a multi-line format for declaration.

This example:
- shows how to declare input and output parameters on the action ‘```hello_world```’ using a multi-line grammar.

### Manifest File
If we want to do more than declare the type (i.e., ‘string’, ‘integer’, ‘float’, etc.) of the input parameter, we can use the multi-line grammar.

#### _Example: input and output parameters with explicit types and descriptions_
```yaml
package:
  name: hello_world_package
  ... # Package keys omitted for brevity
  actions:
    hello_world_advanced_parms:
      function: src/hello_plus.js
      runtime: nodejs@6
      inputs:
        name:
          type: string
          description: name of person
          default: unknown person
        place:
          type: string
          description: location of person
          value: the Shire
        children:
          type: integer
          description: Number of children
          default: 0
        height:
          type: float
          description: height in meters
          default: 0.0
      outputs:
        greeting:
          type: string
          description: greeting string
        details:
          type: string
          description: detailed information about the person
```

### Deploying
```sh
$ wskdeploy -m docs/examples/manifest_hello_world_advanced_parms.yaml

=======================================================================
==./docs/wskdeploy_action_env_var_parms.md
=======================================================================
# Actions

## Setting values from environment variables

This example shows how to set input parameter values using environment variables. “hello world” example and shows how fixed values can be supplied to the input parameters of an Action.

It shows how to:
- declare input parameters on the action ‘```hello_world```’ whose values are set (i.e., bound) from values taken from environment variables.
  - using both single-line and multi-line grammars.
- concatenate string parameter values with values provided from environment variables.
- use this feature using both single-line and multi-line grammars.

### Manifest File
#### _Example: “Hello world” with input values set from environment variables_
```yaml
package:
  name: hello_world_package
  version: 1.0
  license: Apache-2.0
  actions:
    hello_world_env_var_parms:
      function: src/hello.js
      inputs:
        name: $FIRSTNAME
        place: ${TOWN}, ${COUNTRY}
```

### Deploying
Set the values for the three environment variables expected by the Action and deploy:
```sh
$ FIRSTNAME=Sam TOWN="the Shire" COUNTRY="Middle-earth" wskdeploy -m docs/examples/manifest_hello_world_env_var_parms.yaml
```

### Invoking
```sh
$ wsk action invoke hello_world_package/hello_world_env_var_parms --blocking
```

### Result
The invocation should return an 'ok' with a response that includes this result:
```json
"result": {
   "greeting": "Hello, Sam from the Shire, Middle-earth"
},
```

### Invoking
if we modify the three environment variables to different values, update the action and invoke it again:
```sh
$ export FIRSTNAME=Elrond TOWN="Rivendell" COUNTRY="M.E."

=======================================================================
==./docs/wskdeploy_action_fixed_parms.md
=======================================================================
# Actions

## Adding fixed input values to an Action

This example builds upon the previous “hello world” example and shows how fixed values can be supplied to the input parameters of an Action.

It shows how to:
- declare input parameters on the action ‘```hello_world```’ using a single-line grammar.
- add ‘```name```’ and ‘```place```’ as input parameters with the fixed values “```Sam```” and “```the Shire```” respectively.

### Manifest File
#### _Example: “Hello world” with fixed input values for ‘name’ and ‘place’_
```yaml
package:
  name: hello_world_package
  version: 1.0
  license: Apache-2.0
  actions:
    hello_world_fixed_parms:
      function: src/hello.js
      inputs:
        name: Sam
        place: the Shire
```

### Deploying
```sh
$ wskdeploy -m docs/examples/manifest_hello_world_fixed_parms.yaml
```

### Invoking
```sh
$ wsk action invoke hello_world_package/hello_world_fixed_parms --blocking
```

### Result
The invocation should return an 'ok' with a response that includes this result:
```json
"result": {
    "greeting": "Hello, Sam from the Shire"
},
```

### Discussion

In this example:
- The value for the ‘```name```’ input parameter would be set to “```Sam```”.
- The value for the ‘```place```’ input parameter would be set to “```the Shire```”.
- The wskdeploy utility would infer that both ‘```name```’ and ‘```place```’ input parameters to be of type ‘```string```’.


=======================================================================
==./docs/wskdeploy_action_helloworld.md
=======================================================================
# Actions

## The "Hello World" Action

As with most language introductions, in this first example we encode a simple "hello world" action, written in JavaScript, using an OpenWhisk Package Manifest YAML file.

It shows how to:
- declare a single Action named ‘hello_world’ within the ‘hello_world_package’ Package.
- associate the JavaScript function’s source code, stored in the file ‘src/hello.js’, to the ‘hello_world’ Action.

### Manifest file
#### _Example: “Hello world” using a NodeJS (JavaScript) action_
```yaml
package:
  name: hello_world_package
  version: 1.0
  license: Apache-2.0
  actions:
    hello_world:
      function: src/hello.js
```

where "hello.js", within the package-relative subdirectory named ‘src’, contains the following JavaScript code:

```javascript
function main(params) {
    msg = "Hello, " + params.name + " from " + params.place;
    return { greeting:  msg };
}
```

### Deploying

You can actually deploy the "hello world" manifest from the incubator-openwhisk-wskdeploy project directory if you have downloaded it from GitHub:

```sh
$ wskdeploy -m docs/examples/manifest_hello_world.yaml
```

### Invoking
```sh
$ wsk action invoke hello_world_package/hello_world --blocking
```

### Result
The invocation should return an 'ok' with a response that includes this result:

```json
"result": {
    "greeting": "Hello, undefined from undefined"

=======================================================================
==./docs/wskdeploy_action_runtime.md
=======================================================================
# Actions

## Setting your Function's runtime

In the previous ["Hello world" example](), the ```wskdeploy``` utility used the file extension of the function "hello.js" to select the most current NodeJS runtime.

In most cases, allowing the utility to select the runtime works well using this implicit method. However, perhaps your code is dependent on a specific version of a language runtime and you want to explicitly set it?

This example shows how to:
- declare an explicit runtime for your Action's function.

### Manifest file
#### _Example: explicit selection of the NodeJS version 6 runtime_
```yaml
package:
  name: hello_world_package
  version: 1.0
  license: Apache-2.0
  actions:
    hello_world_runtime:
      function: src/hello.js
      runtime: nodejs@6
```

### Deploying

```sh
$ wskdeploy -m docs/examples/manifest_hello_world_runtime.yaml
```

### Invoking
```sh
$ wsk action invoke hello_world_package/hello_world_runtime --blocking
```

### Result
The invocation should return an 'ok' with a response that includes this result:

```json
"result": {
    "greeting": "Hello, undefined from undefined"
},
```

### Discussion

In the above example,
- The value for the '```runtime```' key was a valid name and version supported by OpenWhisk
  - Please see the current supported list here: **[Actions - Valid runtime names](../specification/html/spec_actions.md#valid-runtime-names)**


=======================================================================
==./docs/wskdeploy_action_typed_parms.md
=======================================================================
# Actions

## Typed parameters

This example shows the 'Hello world' example with typed input and output Parameters.

It shows how to:
- declare input and output parameters on the action '```hello_world```' using a simple, single-line format.
- add two input parameters, '```name```' and '```place```', both of type '```string```' to the '```hello_world```' action.
- add an '```integer```' parameter, '```age```', to the action.
- add a '```float```' parameter, '```height```', to the action.
- add two output parameters, '```greeting```' and '```details```', both of type '```string```', to the action.

### Manifest File
#### _Example: 'Hello world' with typed input and output parameter declarations_
```yaml
package:
  name: hello_world_package
  ... # Package keys omitted for brevity
  actions:
    hello_world_typed_parms:
      function: src/hello_plus.js
      inputs:
        name: string
        place: string
        children: integer
        height: float
      outputs:
        greeting: string
        details: string
```
where the function '```hello_plus.js```', within the package-relative subdirectory named ‘```src```’, is updated to use the new parameters:
```javascript
function main(params) {
    msg = "Hello, " + params.name + " from " + params.place;
    family = "You have " + params.children + " children ";
    stats = "and are " + params.height + " m. tall.";
    return { greeting:  msg, details: family + stats };
}
```

### Deploying
```sh
$ wskdeploy -m docs/examples/manifest_hello_world_typed_parms.yaml
```

### Invoking
```sh
$ wsk action invoke hello_world_package/hello_world_typed_parms --blocking
```

=======================================================================
==./docs/wskdeploy_configuring.md
=======================================================================
# Configuring ```wskdeploy```

At minimum, the wskdeploy utility needs valid OpenWhisk APIHOST and AUTH variable to attempt deployment. In this case the default target namespace is assumed; otherwise, NAMESPACE also needs to be provided.

## Precedence order

Wskdeploy attempts to find these values in the following order:

1. **Command line**

Values supplied on the command line using the ```apihost```, ```auth``` and ```namespace``` flags will override values supplied elsewhere (below).

for example the following flags can be used:

```
$ wskdeploy --apihost <host> --auth <auth> --namespace <namespace>
```

Command line values are considered higher in precedence since they indicate an intentional user action to override values that may have been supplied in files.

2. **Deployment file**

Values supplied in a Deployment YAML file will override values found elsewhere (below).

3. **Manifest file**

Values supplied in a Manifest YAML file will override values found elsewhere (below).

4. **.wskprops**

Values set using the Whisk Command Line Interface (CLI) are stored in a ```.wskprops```, typically in your $HOME directory, will override values found elsewhere (below).

It assumes that you have setup and can run the wskdeploy as described in the project README. If so, then the utility will use the OpenWhisk APIHOST and AUTH variable values in your .wskprops file to attempt deployment.

5. **Interactice mode**

If interactive mode is enabled (i.e., using the ```-i``` or ```--allow-interactive``` flags) then wskdeploy will prompt for any missing (required) values.

for example:

```
$ wskdeploy -i -m manifest.yaml
```

=======================================================================
==./docs/wskdeploy_debugging.md
=======================================================================
# Debugging ```wskdeploy```

The Whisk Deploy utility provides several ways to help you in debugging your OpenWhisk application or package during parsing, deployment or undeployment.

## Enabling Verbose mode

The first thing you should do is turn on _"verbose mode"_ using the flag ```-v``` or ```--verbose```.  This will assure that all Informational messages within the code will be displayed.

```
$ wskdeploy -v -m manifest.yaml
```

## Enable console logging in your Action

You may call ```console.log(<text>)``` within your Action (function) code to aid in debugging.  For example, in NodeJS (JavaScript) you could output your entire JSON payload before returning it:
```
function main(params) {
    msg = "Hello, " + params.name + " from " + params.place;
    console.log(msg)
    return { payload:  msg };
}
```

## Enable additional trace in Go Client

Wskdeploy uses the OpenWhisk GoLang Client to format and invoke OpenWhisk's APIs which has additional debug tracing available.

To enable this trace, set the following environment variable in Bash:

```
# set to any value > 0
WSK_CLI_DEBUG=1
```

## Pay attention to Named error messages

Wskpdeloy uses named errors that describe the type of any error found along with additional values that correspond with an error.

For example, if you have an error in your Manifest's YAML, you may see an error such as:
```
[50]: Invalid input of Yaml file =====> incubator-openwhisk-wskdeploy/parsers/manifest_parser.go
[98]: Failed to parse the yaml file manifest_bad_yaml.yaml
 =====> yaml: line 13: could not find expected ':'
```

The named error **NewInputYamlFormatError** provides direct indication of both where in the utilities GoLang code the error was reported, but also details provided from the YAML parser regarding where the Manifest file may contain a grammar error.


All current named errors supported by the utility can be found in the latest ```wskdeployerror.go``` source file:
[wskdeployerror.go](https://github.com/apache/incubator-openwhisk-wskdeploy/blob/master/utils/wskdeployerror.go)

=======================================================================
==./docs/wskdeploy_example_template.md
=======================================================================
# Section

## Title

This example

This example:
- TBD

### Manifest File

#### _Example: TBD_
```yaml

```

### Deploying
```sh
$ wskdeploy -m
```

### Invoking
```sh
$ wsk action invoke
```

### Result
The invocation should return an 'ok' with a response that includes this result:
```json

```

### Discussion
-

### Source code
The manifest file for this example can be found here:
-

### Specification
For convenience, the Actions and Parameters grammar can be found here:
- **[Actions](../specification/html/spec_actions.md#actions)**
- **[Parameters](../specification/html/spec_parameters.md#parameters)**

---
<!--
 Bottom Navigation
-->
<html>
<div align="center">

=======================================================================
==./docs/wskdeploy_faq.md
=======================================================================
# ```wskdeploy``` utility FAQ

### What if ```wskdeploy``` finds an error in my manifest?

- The ```wskdeploy``` utility will not attempt to deploy a package if an error in the manifest is detected, but will report as much information as it can to help you locate the error in the YAML file.

### What if ```wskdeploy``` encounters an error during deployment?

-  The ```wskdeploy``` utility will cease deploying as soon as it receives an error from the target platform and display what error information it receives to you.
- then it will attempt to undeploy any entities that it attempted to deploy.
  - If "interactive mode" was used to deploy, then you will be prompted to confirm you wish to undeploy.

=======================================================================
==./docs/wskdeploy_package_minimal.md
=======================================================================
# Packages

The wskdeploy utility works primarily with the OpenWhisk **Package** resource as described in the [OpenWhisk Packaging Specification](https://github.com/apache/incubator-openwhisk-wskdeploy/tree/master/specification#openwhisk-packaging-specification).

## Creating a minimal OpenWhisk Package

### Start with a Package Manifest (YAML) file
The ```wskdeploy``` utility mainly uses a single YAML file, called a "Package Manifest", to describe all the OpenWhisk components that make up your OpenWhisk Package including Actions, Triggers, Rules, etc.

### Manifest

The minimal manifest file would include only a package declaration, a version number and a license for the package:
```
package:
  name: hello_world_package
  version: 1.0
  license: Apache-2.0
```

Save this into a file called ```"manifest.yaml"``` in a directory of your choice.

### Deploying

#### using the project path
Simply execute the ```wskdeploy``` utility binary against the directory you saved your "manifest.yaml" file in by pointing it to the package location using the ```-p``` flag.

```sh
$ wskdeploy -p <my_directory>
```
wskdeploy will automatically look for any file named ```"manifest.yaml"``` or ```"manifest.yml"``` in the directory it is pointed; however, the _manifest file can be called anything_ as long as it has a .yaml or .yml extension and passed on the command line using the ```-m``` flag.

#### using a named manifest file
If you called your manifest "manifest_helloworld.yaml" (not using the default manifest.yaml name) and placed it in a directory below your project directory, you could simply provide the project-relative path to the manifest file as follows:
```sh
$ wskdeploy -p <my_directory> -m docs/examples/manifest_package_minimal.yaml
```

#### Interactive mode

If you want to simply verify your manifest file can be read and parsed properly before deploying, you can add the ```-i``` or ```--allow-interactive``` flag:

```sh
$ ./wskdeploy -i -m docs/examples/manifest_package_minimal.yaml
```

and the utility will stop, show you all the OpenWhisk package components it will deploy from your manifest and ask you if you want to deploy them or not.

```sh
Package:
Name: hello_world_package

=======================================================================
==./docs/wskdeploy_sequence_basic.md
=======================================================================
# Sequences

## Creating a basic Action sequence

OpenWhisk supports creating a new, named composite action from sequencung multiple, compatible Actions.

This example:
- Shows how to use a Manifest to sequence three actions together to:
  - accept raw parameter data, creating a structured record from it
  - process the initial data and enhance it
  - augment the data via the sequenced actions

### Manifest File

#### _Example: Composing 3 actions into a sequence._
```yaml
# Example: processing data in a sequence
package:
  name: fellowship_package
  ...
  actions:
    member_join:
      function: src/member_join.js
      inputs:
        name:
          type: string
          description: name of person
          default: unknown
        place:
          type: string
          description: location of person
          default: unknown
        job:
          type: string
          description: current occupation
          default: 0
      outputs:
        member:
          type: json
          description: member record
    member_process:
      function: src/member_process.js
      inputs:
        member: {}
    member_equip:
      function: src/member_equip.js
      inputs:
        member: {}
  sequences:
    fellowship_membership:

=======================================================================
==./docs/wskdeploy_triggerrule_basic.md
=======================================================================
# Triggers and Rules

## Creating a Trigger for an Action
This example shows how to create a Trigger that is compatible with the previous, more [advanced "Hello world" Action example](wskdeploy_action_advanced_parms.md#actions), which has multiple input parameters of different types, and connect them together using a Rule.

### Manifest File
#### _Example: “Hello world” Action with a compatible Trigger and Rule_
```yaml
package:
  name: hello_world_package
  version: 1.0
  license: Apache-2.0
  actions:
    hello_world_triggerrule:
      function: src/hello_plus.js
      runtime: nodejs
      inputs:
        name: string
        place: string
        children: integer
        height: float
      outputs:
        greeting: string
        details: string

  triggers:
    meetPerson:
      inputs:
        name: Sam
        place: the Shire
        children: 13
        height: 1.2

  rules:
    meetPersonRule:
      trigger: meetPerson
      action: hello_world_triggerrule
```

### Deploying
```sh
$ wskdeploy -m docs/examples/manifest_hello_world_triggerrule.yaml
```

### Invoking
First, let's try _"invoking"_ the '```hello_world_triggerrule```' Action directly without the Trigger.
```sh
$ wsk action invoke hello_world_package/hello_world_triggerrule --blocking
```


=======================================================================
==./docs/wskdeploy_triggerrule_trigger_bindings.md
=======================================================================
# Triggers and Rules

## Using a Deployment file to bind Trigger parameters
This example builds on the previous [Trigger and Rule example](wskdeploy_triggerrule_basic.md#triggers-and-rules) and will demonstrate how to use a Deployment File to bind values to a Trigger’s input parameters and apply them against a compatible Manifest File.

### Manifest File
Let’s use a variant of the [Manifest file from the previous example](examples/manifest_hello_world_triggerrule.yaml); however, we will leave the parameters on the ‘```meetPerson```’ Trigger unbound and having only Type declarations for each.

#### _Example: “Hello world” Action, Trigger and Rule with no Parameter bindings_
```yaml
package:
  name: hello_world_package
  ... # Package keys omitted for brevity
  actions:
    hello_world_triggerrule:
      function: src/hello_plus.js
      runtime: nodejs
      inputs:
        name: string
        place: string
        children: integer
        height: float
      outputs:
        greeting: string
        details: string

  triggers:
    meetPerson:
      inputs:
        name: string
        place: string
        children: integer
        height: float

  rules:
    meetPersonRule:
      trigger: meetPerson
      action: hello_world_triggerrule
```

### Deployment file
Let’s create a Deployment file that is designed to be applied to the Manifest file (above) which will contain the parameter bindings (i.e., the values) for the '```meetPerson```' Trigger.

#### _Example: Deployment file that binds parameters to the '```meetPerson```' Trigger_
```yaml
application:
  packages:
      hello_world_package:
        triggers:
          meetPerson:

=======================================================================
==./docs/examples/deployment_hello_world_triggerrule_bindings.yaml
=======================================================================
project:
  packages:
      hello_world_package:
        triggers:
          meetPerson:
            inputs:
              name: Elrond
              place: Rivendell
              children: 3
              height: 1.88

=======================================================================
==./docs/examples/deployment_hello_world_triggerrule_unbound.yaml
=======================================================================
project:
  package:
    hello_world_package:
      triggers:
        meetPerson:
          inputs:
            name: string
            place: string
            children: integer
            height: float

=======================================================================
==./docs/examples/manifest_hello_world.yaml
=======================================================================
# Example: Basic Hello World using a NodeJS (JavaScript) action
package:
  name: hello_world_package
  version: 1.0
  license: Apache-2.0
  actions:
    hello_world:
      function: src/hello.js

=======================================================================
==./docs/examples/manifest_hello_world_advanced_parms.yaml
=======================================================================
# Example: input and output parameters with advanced fields
package:
  name: hello_world_package
  version: 1.0
  license: Apache-2.0
  actions:
    hello_world_advanced_parms:
      function: src/hello_plus.js
      inputs:
        name:
          type: string
          description: name of person
          default: unknown person
        place:
          type: string
          description: location of person
          value: the Shire
        children:
          type: integer
          description: Number of children
          default: 0
        height:
          type: float
          description: height in meters
          default: 0.0
      outputs:
        greeting:
          type: string
          description: greeting string
        details:
          type: string
          description: detailed information about the person

=======================================================================
==./docs/examples/manifest_hello_world_env_var_parms.yaml
=======================================================================
# Example: “Hello world” with input values set from environment variables
package:
  name: hello_world_package
  version: 1.0
  license: Apache-2.0
  actions:
    hello_world_env_var_parms:
      function: src/hello.js
      inputs:
        name: $FIRSTNAME
        place:
          value: ${TOWN}, ${COUNTRY}
      outputs:
        greeting: string

=======================================================================
==./docs/examples/manifest_hello_world_fixed_parms.yaml
=======================================================================
# Example: “Hello world” with fixed input values for ‘name’ and ‘place’
package:
  name: hello_world_package
  version: 1.0
  license: Apache-2.0
  actions:
    hello_world_fixed_parms:
      function: src/hello.js
      inputs:
        name: Sam
        place: the Shire

=======================================================================
==./docs/examples/manifest_hello_world_runtime.yaml
=======================================================================
# Example: explicit selection of the NodeJS version 6 runtime
package:
  name: hello_world_package
  version: 1.0
  license: Apache-2.0
  actions:
    hello_world_runtime:
      function: src/hello.js
      runtime: nodejs@6

=======================================================================
==./docs/examples/manifest_hello_world_triggerrule.yaml
=======================================================================
package:
  name: hello_world_package
  version: 1.0
  license: Apache-2.0
  actions:
    hello_world_triggerrule:
      function: src/hello_plus.js
      inputs:
        name: string
        place: string
        children: integer
        height: float
      outputs:
        greeting: string
        details: string

  triggers:
    meetPerson:
      inputs:
        name: Sam
        place: the Shire
        children: 13
        height: 1.2

  rules:
    meetPersonRule:
      trigger: meetPerson
      action: hello_world_triggerrule

=======================================================================
==./docs/examples/manifest_hello_world_triggerrule_unbound.yaml
=======================================================================
package:
  name: hello_world_package
  version: 1.0
  license: Apache-2.0
  actions:
    hello_world_triggerrule:
      function: src/hello_plus.js
      inputs:
        name: string
        place: string
        children: integer
        height: float
      outputs:
        greeting: string
        details: string

  triggers:
    meetPerson:
      inputs:
        name: string
        place: string
        children: integer
        height: float

  rules:
    meetPersonRule:
      trigger: meetPerson
      action: hello_world_triggerrule

=======================================================================
==./docs/examples/manifest_hello_world_typed_parms.yaml
=======================================================================
# Example: “Hello world” with typed input and output parameter declarations
package:
  name: hello_world_package
  version: 1.0
  license: Apache-2.0
  actions:
    hello_world_typed_parms:
      function: src/hello_plus.js
      inputs:
        name: string
        place: string
        children: integer
        height: float
      outputs:
        greeting: string
        details: string

=======================================================================
==./docs/examples/manifest_package_minimal.yaml
=======================================================================
# Example 1: Minimum valid Package manifest file
package:
  name: hello_world_package
  version: 1.0
  license: Apache-2.0

=======================================================================
==./docs/examples/manifest_sequence_basic.yaml
=======================================================================
# Example: processing data in a sequence
package:
  name: fellowship_package
  version: 1.0
  license: Apache-2.0
  actions:
    member_join:
      function: src/member_join.js
      inputs:
        name:
          type: string
          description: name of person
          default: unknown
        place:
          type: string
          description: location of person
          default: unknown
        job:
          type: string
          description: current occupation
          default: 0
      outputs:
        member:
          type: json
          description: member record
    member_process:
      function: src/member_process.js
      inputs:
        member: {}
    member_equip:
      function: src/member_equip.js
      inputs:
        member: {}
  sequences:
    fellowship_membership:
      actions: member_join, member_process, member_equip

=======================================================================
==./specification/diagrams/README.md
=======================================================================
# Specification diagram source files

=======================================================================
==./specification/html/spec_actions.md
=======================================================================
## Actions

The Action entity schema contains the necessary information to deploy an OpenWhisk function and define its deployment configurations, inputs and outputs.

### Fields
<html>
<table>
  <tr>
   <th width="80">Key Name</th>
   <th>Required</th>
   <th>Value Type</th>
   <th>Default</th>
   <th>Description</th>
  </tr>
 <tr>
  <td>version</td>
  <td>no</td>
  <td>version</td>
  <td>N/A</td>
  <td>The optional user-controlled version for the Action.</td>
 </tr>
 <tr>
  <td>function</td>
  <td>yes</td>
  <td>string</td>
  <td>N/A</td>
  <td>Required source location (path inclusive) of the Action code either:
    <ul>
      <li>Relative to the Package manifest file.</li>
      <li>Relative to the specified Repository.</li>
    </ul>
  </td>
 </tr>
 <tr>
  <td>runtime</td>
  <td>no</td>
  <td>string</td>
  <td>N/A</td>
  <td>The required runtime name (and optional version) that the Action code requires for an execution environment.
  <p><i>Note: May be optional if tooling allowed to make assumptions about file extensions.</i></p>
  </td>
 </tr>
 <tr>
  <td>inputs</td>
  <td>no</td>
  <td>list of parameter</td>
  <td>N/A</td>
  <td>The optional ordered list inputs to the Action.</td>
 </tr>
 <tr>

=======================================================================
==./specification/html/spec_index.md
=======================================================================
# OpenWhisk Package Specification (HTML)

Portions of the OpenWhisk Packaging Specification, for convenience, are made available here in HTML format. The canonical source for the specification is in PDF format and can be found within this repository:
- [https://github.com/apache/incubator-openwhisk-wskdeploy/tree/master/specification](https://github.com/apache/incubator-openwhisk-wskdeploy/tree/master/specification)

# Programming Guide
If you want to learn how to write Packages and Applications using the specification and deploy them using the ```wskdeploy``` utility, please read the step-by-step guide:
- "[wskdeploy utility by example](../../docs/programming_guide.md#wskdeploy-utility-by-example)"

## Index
- [Parameters](spec_parameters.md#parameters) - grammar, schema and examples for input and output parameters.
- [Parameter Types](spec_types.md#parameter-types) - supported YAML and OpenWhisk Types.
- [Shared Entity Schema](spec_shared_entity_schema.md#shared-entity-schema) - fields that are common among entities in the programming model.
- [Packages](spec_packages.md#packages) - grammar, schema and examples for Packages.
- [Actions](spec_actions.md#actions) - grammar, schema and examples for Actions.
- [Triggers and Rules](spec_trigger_rule.md#triggers-and-rules) - grammar, schema and examples for Triggers and Rules.
- [Sequences](spec_sequences.md#sequences) - schema to compose multiple Actions into a sequence.
- [Normative & Non-normative References](spec_normative_refs.md)

=======================================================================
==./specification/html/spec_normative_refs.md
=======================================================================

<!--
********************************
  Normative Reference
********************************
-->
<h2>Normative References</h2>
<p>&nbsp;</p>
<table width="100%">
 <tr>
  <th>
  <p>Tag</p>
  </th>
  <th>
  <p>Description</p>
  </th>
 </tr>
 <tr>
  <td>
  <p><a>RFC2119</a></p>
  </td>
  <td>
  <p>S. Bradner, <i>Key words for use in RFCs to Indicate Requirement Levels</i>, <a href="http://www.ietf.org/rfc/rfc2119.txt">http://www.ietf.org/rfc/rfc2119.txt</a>, IETF RFC 2119, March 1997.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><a>YAML-1.2</a></p>
  </td>
  <td>
  <p>YAML, Version 1.2, 3rd Edition, Patched at 2009-10-01, Oren Ben-Kiki, Clark Evans, Ingy dšt Net <a href="http://www.yaml.org/spec/1.2/spec.html">http://www.yaml.org/spec/1.2/spec.html</a></p>
  </td>
 </tr>
 <tr>
  <td>
  <p><a>YAML-TS-1.1</a></p>
  </td>
  <td>
  <p>Timestamp Language-Independent Type for YAML Version 1.1, Working Draft 2005-01-18, <a href="http://yaml.org/type/timestamp.html">http://yaml.org/type/timestamp.html</a></p>
  </td>
 </tr>
 <tr>
  <td>
  <p><a>Maven-Version</a></p>
  </td>
  <td>
  <p>The version type is defined with the <a href="https://maven.apache.org/index.html">Apache Maven project's</a> policy draft:</p>
  <p><a href="https://cwiki.apache.org/confluence/display/MAVEN/Version+number+policy">https://cwiki.apache.org/confluence/display/MAVEN/Version+number+policy</a></p>
  </td>
 </tr>

=======================================================================
==./specification/html/spec_packages.md
=======================================================================
## Packages

The Package entity schema is used to define an OpenWhisk package within a manifest.

### Fields
<html>
<table width="100%">
 <tr>
  <th width="16%">
   <p>Key Name</p>
  </th>
  <th width="12%">
   <p>Required</p>
  </th>
  <th width="16%">
   <p>Value Type</p>
  </th>
  <td width="14%">
   <p>Default</p>
  </th>
  <th width="40%">
   <p>Description</p>
  </th>
 </tr>
 <tr>
  <td>version</td>
  <td>yes</td>
  <td><a href="spec_types_yaml.md#yaml-types">version</a></td>
  <td>N/A</td>
  <td>The required user-controlled version for the Package.</td>
 </tr>
 <tr>
  <td>license</td>
  <td>no</td>
  <td>string</td>
  <td>N/A</td>
  <td>The required value that indicates the type of license the Package is governed by.
   <p>The value is required to be a valid Linux-SPDX value. See <a href="https://spdx.org/licenses/">https://spdx.org/licenses/</a>.</p></td>
 </tr>
 <tr>
  <td>credential</td>
  <td>no</td>
  <td>string</td>
  <td>N/A</td>
  <td>
   <p>The optional Credential used for all entities within the Package.</p>
   <p>The value contains either:</p>
   <p>A credential string.</p>
   <p>The optional name of a credential (e.g., token) that is defined elsewhere.</p>
  </td>

=======================================================================
==./specification/html/spec_parameters.md
=======================================================================
# Parameters

- [Dollar Notation ($)](#dollar-notation--schema-for-values)

## Parameter schema
The Parameter schema is used to define input and/or output data to be used by OpenWhisk entities for the purposes of validation.

### Fields
<html>
<table width="100%">
  <tr>
   <th>Key Name</th>
   <th>Required</th>
   <th>Value Type</th>
   <th>Default</th>
   <th>Description</th>
  </tr>
 <tr>
  <td>
  <p>type</p>
  </td>
  <td>
  <p>no</p>
  </td>
  <td>
  <p>&lt;any&gt;</p>
  </td>
  <td>
  <p>string</p>
  </td>
  <td>
  <p>Optional valid type name or the parameter's value for validation purposes. By default, the type is string.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p>description</p>
  </td>
  <td>
  <p>no</p>
  </td>
  <td>
  <p>string256</p>
  </td>
  <td>
  <p>N/A</p>
  </td>
  <td>
  <p>Optional description of the Parameter.</p>
  </td>

=======================================================================
==./specification/html/spec_sequences.md
=======================================================================
## Sequences

Actions can be composed into sequences to, in effect, form a new Action. The Sequence entity allows for a simple, convenient way to describe them in the Package Manifest.

### Fields
<html>
<table>
  <tr>
   <th>Key Name</th>
   <th>Required</th>
   <th>Value Type</th>
   <th>Default</th>
   <td>Description</th>
  </tr>
 <tr>
  <td>
  <p>actions</p>
  </td>
  <td>
  <p>yes</p>
  </td>
  <td>
  <p>list of Action</p>
  </td>
  <td>
  <p>N/A</p>
  </td>
  <td>
  <p>The required list of two or more actions</p>
  </td>
 </tr>
</table>
</html>

### Requirements

- The comma separated list of Actions on the actions key SHALL imply the order of the sequence (from left, to right).
- There MUST be two (2) or more actions declared in the sequence.

### Notes

- The sequences key exists for convenience; however, it is just one possible instance of a composition of Actions. The composition entity is provided for not only describing sequences, but also for other (future) compositions and additional information needed to compose them.&nbsp; For example, the composition entity allows for more complex mappings of input and output parameters between Actions.

### Grammar

```yaml
sequences:
  <sequence name>:
     <Entity schema>
     actions: <ordered list of action names>

=======================================================================
==./specification/html/spec_shared_entity_schema.md
=======================================================================
## Shared Entity Schema

The Entity Schema contains fields that are common (shared) to all OpenWhisk entities (e.g., Actions, Triggers, Rules, etc.).

### Fields

<html>
<table>

  <tr>
   <th>Key Name</th>
   <th>Required</th>
   <th>Value Type</th>
   <th>Default</th>
   <th>Description</th>
  </tr>

 <tr>
  <td>
  <p>description</p>
  </td>
  <td>
  <p>no</p>
  </td>
  <td>
  <p>string256</p>
  </td>
  <td>
  <p>N/A</p>
  </td>
  <td>
  <p>The optional description for the Entity.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p>displayName</p>
  </td>
  <td>
  <p>no</p>
  </td>
  <td>
  <p>string16</p>
  </td>
  <td>
  <p>N/A</p>
  </td>
  <td>
  <p>This is the optional name that will be displayed on small form-factor devices.</p>
  </td>

=======================================================================
==./specification/html/spec_trigger_rule.md
=======================================================================
## Triggers and Rules

- [Triggers](#triggers)
- [Rules](#rules)

## Triggers

The Trigger entity schema contains the necessary information to describe the stream of events that it represents. For more information, see the document "[Creating Triggers and Rules](https://github.com/apache/incubator-openwhisk/blob/master/docs/triggers_rules.md)".

### Fields
<html>
<table>
  <tr>
   <th>Key Name</th>
   <th>Required</th>
   <th>Value Type</th>
   <th>Default</th>
   <th>Description</th>
  </tr>

 <tr>
  <td>
  <p>feed</p>
  </td>
  <td>
  <p>no</p>
  </td>
  <td>
  <p>string</p>
  </td>
  <td>
  <p>N/A</p>
  </td>
  <td>
  <p>The optional name of the Feed associated with the Trigger.
  </p>
  </td>
 </tr>
 <tr>
  <td>
  <p>credential</p>
  </td>
  <td>
  <p>no</p>
  </td>
  <td>
  <p>Credential</p>
  </td>
  <td>
  <p>N/A</p>

=======================================================================
==./specification/html/spec_types.md
=======================================================================
# Parameter Types

- [YAML Types](#yaml-types)
- [OpenWhisk Types](#openwhisk-types)
  - [scalar-unit Types](#scalar-unit-types)

<!--
********************************
  YAML Types
********************************
-->

## YAML Types

Many of the types we use in this profile are <i>built-in</i> types from the [YAML 1.2 specification](http://www.yaml.org/spec/1.2/spec.html) (i.e., those identified by the 'tag:yaml.org,2002' version tag).

The following table declares the valid YAML type URIs and aliases that SHALL be used when defining parameters or properties within an
OpenWhisk package manifest:

<html>
<table width="100%">
 <tr>
  <th width=20%>Type Name</th>
  <th width=30%>Type URI</th>
  <th width=50%>Notes</th>
 </tr>
 <tr>
  <td>
  <p><a>string</a></p>
  </td>
  <td>
  <p>tag:yaml.org,2002:str (default)</p>
  </td>
  <td>
  <p>Default type if no type provided</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><a>integer</a></p>
  </td>
  <td>
  <p>tag:yaml.org,2002:int</p>
  </td>
  <td>
  <p>Signed. Includes large integers (i.e., long type)</p>
  </td>
 </tr>
 <tr>
  <td>

=======================================================================
==./specification/images/images.md
=======================================================================
This directory contains supporting images and graphics for the specification.

Including:
- [OpenWhisk - Conceptual Manifest File Creation.png](https://github.com/apache/incubator-openwhisk-wskdeploy/blob/master/specification/images/OpenWhisk%20-%20Conceptual%20Manifest%20File%20Creation.png)
- [OpenWhisk - Conceptual Manifest File Deployment.png](https://github.com/apache/incubator-openwhisk-wskdeploy/blob/master/specification/images/OpenWhisk%20-%20Conceptual%20Manifest%20File%20Deployment.png)

=======================================================================
==./tests/README.md
=======================================================================
# `wskdeploy` Test Cases and Real World Applications

## Test Cases

There are two types of test cases supported (1) unit test and (2) integration test.
You can identify them by the first line of each test file `_test.go`.

### Unit Tests

Unit tests are tagged with `+build unit` tag. For example, the test file
[deploymentreader_test.go](https://github.com/apache/incubator-openwhisk-wskdeploy/blob/master/deployers/deploymentreader_test.go)
under `deployers/` contains unit test cases which is indicated with the unit tests
tag on the top of the file:

```
// +build unit

package tests
...
```

#### How do I run unit tests?

In order to run any unit tests, you need to install the package [Testify](https://github.com/stretchr/testify/).
After installing Testify, all the unit tests can be run from the main `incubator-openwhisk-wskdeploy`
repository folder using the following command:


```
cd $GOPATH
go get -u github.com/stretchr/testify
cd incubator-openwhisk-wskdeploy/
$ go test -v ./... -tags unit
```

#### How do I run an individual test?

Above command will run all the unit tests from `incubator-openwhisk-wskdeploy`, in
order to run a specific test, use:

```
go test -v <path-to-package-dir> -tags unit -run <test-name>
```

For example:

```
go test -v ./parsers/ -tags unit -run TestComposeActionsForWebActions
```


=======================================================================
==./tests/apps/openwhisk-githubslackbot/README.md
=======================================================================
# GitHub Slack Bot

[Github Slack Bot](https://github.com/apache/incubator-openwhisk-GitHubSlackBot)
is an application designed to post updates to Slack when a GitHub pull request is
ready to merge or a list of pull requests are under review for certain days and
haven't merged.

You can find detailed Architecture and Usage at
[incubator-openwhisk-githubslackbot](https://github.com/apache/incubator-openwhisk-GitHubSlackBot).

Github Slack Bot application is dependent on three major components:

1. [Cloudant Package](https://github.com/apache/incubator-openwhisk-package-cloudant)
2. [GitHub Package](https://github.com/apache/incubator-openwhisk-catalog/tree/master/packages/github)
3. [Slack Package](https://github.com/apache/incubator-openwhisk-catalog/tree/master/packages/slack)


#### `manifest.yaml` for Cloudant Package 

```yaml
    dependencies:
        cloudant-package:
            location: /whisk.system/cloudant
            inputs:
                username: $CLOUDANT_USERNAME
                password: $CLOUDANT_PASSWORD
                host: ${CLOUDANT_USERNAME}.cloudant.com
```

#### `manifest.yaml` for Github Package 

```yaml
    dependencies:
            github-package:
                location: /whisk.system/github
                inputs:
                    username: $GITHUB_USERNAME
                    repository: $GITHUB_REPOSITORY
                    accessToken: $GITHUB_ACCESSTOKEN
```

#### `manifest.yaml` for Slack Package 


```yaml
    dependencies:
        slack-package:
            location: /whisk.system/slack
            inputs:
                username: $SLACK_USERNAME 

=======================================================================
==./tests/apps/openwhisk-githubslackbot/manifest.yaml
=======================================================================
# OpenWhisk Whisk Deploy manifest for incubator-openwhisk-githubslackbot
# Installing openwhisk actions, triggers, and rules for OpenWhisk building block
#   Cloudant Package
#   GitHub Package
#   Slack Package
#   Alarm Trigger
#   

# Deployment using this manifest file creates following OpenWhisk components:
#   Package:    TrackPRsInCloudant
#   Package:    GitHubWebHook
#   Pacakge:    PostPRToSlack
#   Package:    githubslackbot
#   Action:     githubslackbot/track-pull-requests
#   Action:     githubslackbot/find-delayed-pull-requests
#   Action:     githubslackbot/post-to-slack
#   Sequence:   githubslackbot/SequenceToPostGitHubPRsToSlack
#   Trigger:    GitHubWebHookTrigger, Every12Hours
#   Rule:       RuleToTrackPullRequests, RuleToPostGitHubPRsToSlack

# This manifest file reads following env. variables:
#   CLOUDANT_USERNAME
#   CLOUDANT_PASSWORD
#   CLOUDANT_DATABASE
#   GITHUB_USERNAME
#   GITHUB_REPOSITORY
#   GITHUB_ACCESSTOKEN
#   SLACK_USERNAME
#   SLACK_URL
#   SLACK_CHANNEL

packages:
    githubslackbot:
        dependencies:
            TrackPRsInCloudant:
                location: /whisk.system/cloudant
                inputs:
                    username: $CLOUDANT_USERNAME
                    password: $CLOUDANT_PASSWORD
                    host: ${CLOUDANT_USERNAME}.cloudant.com
                    database: $CLOUDANT_DATABASE
            GitHubWebHook:
                location: /whisk.system/github
                inputs:
                    username: $GITHUB_USERNAME
                    repository: $GITHUB_REPOSITORY
                    accessToken: $GITHUB_ACCESSTOKEN
            PostPRToSlack:
                location: /whisk.system/slack
                inputs:

=======================================================================
==./tests/apps/owbp-cloudant-trigger/README.md
=======================================================================
# owbp-cloudant-trigger
code for openwhisk-cloudant-trigger

=======================================================================
==./tests/apps/owbp-cloudant-trigger/manifest-bp.json
=======================================================================
{
  "_id": "d8cf3281dabeab2946d55276beb13020",
  "_rev": "7-6bd988c10a1ff8c04b5700b5d800c275",
  "name": "New Cloudant Item",
  "description": "When a cloudant DB has a data item edited or added, log the change in the console.",
  "long_description": "This blueprint will create a sequence of actions, and a trigger that will kick off that sequence.  The trigger is fired when there is a change in the connected Cloudant DB, which should be a database of cats, with a name and a color.  The expected data item is a cat, with a name and a color defined.  When a new cat is added to the database, or a current cat edited, the data will be logged to the console.",
  "url": "https://github.com/apache/incubator-openwhisk-wskdeploy/tree/master/tests/apps/owbp-cloudant-trigger",
  "runtime": {
    "name": "Node.js 6",
    "kind": "nodejs:6",
    "type": "node"
  },
  "categories": [
    "nodejs",
    "cloudant"
  ]
}

=======================================================================
==./tests/apps/owbp-cloudant-trigger/runtimes/node/manifest.yaml
=======================================================================
# Wskdeploy manifest for openwhisk-node-cloudant-trigger
# Installing openwhisk actions, triggers, and rules for OpenWhisk building block - Cloudant Trigger

# Deployment using this manifest file creates following OpenWhisk components:
#   Package:    node-openwhisk-cloudant
#   Package:    node-cloudant-trigger
#   Action:     node-cloudant-trigger/process-change.js
#   Sequence:   node-cloudant-trigger/process-change-cloudant-sequence
#   Trigger:    node-data-inserted-trigger
#   Rule:       node-log-change-rule

# This manifest file reads following env. variables:
#   CLOUDANT_USERNAME
#   CLOUDANT_PASSWORD
#   CLOUDANT_DATABASE

packages:
    node-cloudant-trigger:
        dependencies:
            # binding cloudant package named node-openwhisk-cloudant
            node-openwhisk-cloudant:
                location: /whisk.system/cloudant
                inputs:
                    username: $CLOUDANT_USERNAME
                    password: $CLOUDANT_PASSWORD
                    host: ${CLOUDANT_USERNAME}.cloudant.com
        triggers:
            # Trigger named "node-data-inserted-trigger"
            # Creating trigger to fire events when data is inserted into database
            node-data-inserted-trigger:
                source: node-openwhisk-cloudant/changes
                inputs:
                    dbname: $CLOUDANT_DATABASE
        actions:
            # Action named "process-change"
            # Creating action that is printing data which is written to the database
            process-change:
                function: actions/process-change.js

        sequences:
            # Sequence named "process-change-cloudant-sequence"
            # Creating sequence to connect the cloudant "read" action with the "process-change" action
            process-change-cloudant-sequence:
                actions: node-openwhisk-cloudant/read, process-change
        rules:
            # Rule named "node-log-change-rule"
            # Creating rule that maps database change trigger to sequence
            node-log-change-rule:
                trigger: node-data-inserted-trigger
                action: process-change-cloudant-sequence

=======================================================================
==./tests/apps/owbp-cloudant-trigger/runtimes/php/manifest.yaml
=======================================================================
# Wskdeploy manifest for openwhisk-php-cloudant-trigger
# Installing openwhisk actions, triggers, and rules for OpenWhisk building block - Cloudant Trigger

# Deployment using this manifest file creates following OpenWhisk components:
#   Package:    php-openwhisk-cloudant
#   Package:    php-cloudant-trigger
#   Action:     php-cloudant-trigger/process-change.js
#   Sequence:   php-cloudant-trigger/process-change-cloudant-sequence
#   Trigger:    php-data-inserted-trigger
#   Rule:       php-log-change-rule

# This manifest file reads following env. variables:
#   CLOUDANT_USERNAME
#   CLOUDANT_PASSWORD
#   CLOUDANT_DATABASE

packages:
    php-cloudant-trigger:
        dependencies:
            # binding cloudant package named php-openwhisk-cloudant
            php-openwhisk-cloudant:
                location: /whisk.system/cloudant
                inputs:
                    username: $CLOUDANT_USERNAME
                    password: $CLOUDANT_PASSWORD
                    host: ${CLOUDANT_USERNAME}.cloudant.com
        triggers:
            # Trigger named "php-data-inserted-trigger"
            # Creating trigger to fire events when data is inserted into database
            php-data-inserted-trigger:
                source: php-openwhisk-cloudant/changes
                inputs:
                    dbname: $CLOUDANT_DATABASE
        actions:
            # Action named "process-change"
            # Creating action that is printing data which is written to the database
            process-change:
                function: actions/process-change.php

        sequences:
            # Sequence named "process-change-cloudant-sequence"
            # Creating sequence to connect the cloudant "read" action with the "process-change" action
            process-change-cloudant-sequence:
                actions: php-openwhisk-cloudant/read, process-change
        rules:
            # Rule named "php-log-change-rule"
            # Creating rule that maps database change trigger to sequence
            php-log-change-rule:
                trigger: php-data-inserted-trigger
                action: process-change-cloudant-sequence

=======================================================================
==./tests/apps/owbp-cloudant-trigger/runtimes/php/actions/process-change.php
=======================================================================
function main(array $args) : array
{
  if (array_key_exists("name", $args) && array_key_exists("color", $args)) {
    $name = $args["name"];
    $color = $args["color"];
    $message = "A $color cat named $name was added.";
    print($message);
    return ["change" => $message];
  } else {
    return ["error" => "Please make sure name and color parameters are set."];
  }
}

=======================================================================
==./tests/apps/owbp-cloudant-trigger/runtimes/python/manifest.yaml
=======================================================================
# Wskdeploy manifest for openwhisk-python-cloudant-trigger
# Installing openwhisk actions, triggers, and rules for OpenWhisk building block - Cloudant Trigger

# Deployment using this manifest file creates following OpenWhisk components:
#   Package:    python-openwhisk-cloudant
#   Package:    python-cloudant-trigger
#   Action:     python-cloudant-trigger/process-change.js
#   Sequence:   python-cloudant-trigger/process-change-cloudant-sequence
#   Trigger:    python-data-inserted-trigger
#   Rule:       python-log-change-rule

# This manifest file reads following env. variables:
#   CLOUDANT_USERNAME
#   CLOUDANT_PASSWORD
#   CLOUDANT_DATABASE

packages:
    python-cloudant-trigger:
        dependencies:
            # binding cloudant package named python-openwhisk-cloudant
            python-openwhisk-cloudant:
                location: /whisk.system/cloudant
                inputs:
                    username: $CLOUDANT_USERNAME
                    password: $CLOUDANT_PASSWORD
                    host: ${CLOUDANT_USERNAME}.cloudant.com
        triggers:
            # Trigger named "python-data-inserted-trigger"
            # Creating trigger to fire events when data is inserted into database
            python-data-inserted-trigger:
                source: python-openwhisk-cloudant/changes
                inputs:
                    dbname: $CLOUDANT_DATABASE
        actions:
            # Action named "process-change"
            # Creating action that is printing data which is written to the database
            process-change:
                function: actions/process-change.py

        sequences:
            # Sequence named "process-change-cloudant-sequence"
            # Creating sequence to connect the cloudant "read" action with the "process-change" action
            process-change-cloudant-sequence:
                actions: python-openwhisk-cloudant/read, process-change
        rules:
            # Rule named "python-log-change-rule"
            # Creating rule that maps database change trigger to sequence
            python-log-change-rule:
                trigger: python-data-inserted-trigger
                action: process-change-cloudant-sequence

=======================================================================
==./tests/apps/owbp-cloudant-trigger/runtimes/swift/manifest.yaml
=======================================================================
# Wskdeploy manifest for openwhisk-swift-cloudant-trigger
# Installing openwhisk actions, triggers, and rules for OpenWhisk building block - Cloudant Trigger

# Deployment using this manifest file creates following OpenWhisk components:
#   Package:    swift-openwhisk-cloudant
#   Package:    swift-cloudant-trigger
#   Action:     swift-cloudant-trigger/process-change.js
#   Sequence:   swift-cloudant-trigger/process-change-cloudant-sequence
#   Trigger:    swift-data-inserted-trigger
#   Rule:       swift-log-change-rule

# This manifest file reads following env. variables:
#   CLOUDANT_USERNAME
#   CLOUDANT_PASSWORD
#   CLOUDANT_DATABASE

packages:
    swift-cloudant-trigger:
        dependencies:
            # binding cloudant package named swift-openwhisk-cloudant
            swift-openwhisk-cloudant:
                location: /whisk.system/cloudant
                inputs:
                    username: $CLOUDANT_USERNAME
                    password: $CLOUDANT_PASSWORD
                    host: ${CLOUDANT_USERNAME}.cloudant.com
        triggers:
            # Trigger named "swift-data-inserted-trigger"
            # Creating trigger to fire events when data is inserted into database
            swift-data-inserted-trigger:
                source: swift-openwhisk-cloudant/changes
                inputs:
                    dbname: $CLOUDANT_DATABASE
        actions:
            # Action named "process-change"
            # Creating action that is printing data which is written to the database
            process-change:
                function: actions/process-change.swift

        sequences:
            # Sequence named "process-change-cloudant-sequence"
            # Creating sequence to connect the cloudant "read" action with the "process-change" action
            process-change-cloudant-sequence:
                actions: swift-openwhisk-cloudant/read, process-change
        rules:
            # Rule named "swift-log-change-rule"
            # Creating rule that maps database change trigger to sequence
            swift-log-change-rule:
                trigger: swift-data-inserted-trigger
                action: process-change-cloudant-sequence

=======================================================================
==./tests/apps/owbp-cloudant-trigger/runtimes/swift/actions/process-change.swift
=======================================================================
func main(args: [String:Any]) -> [String:Any] {
    if let color = args["color"] as? String,
        let name = args["name"] as? String
    {
      let message = "A \(color) cat named \(name) was added."
      print(message)
      return [ "change": message ]
    } else {
      return [ "error": "Please make sure to pass color and name into params" ]
    }
}

=======================================================================
==./tests/dat/deployment-deploymentreader-test-package.yml
=======================================================================
package:
      name: triggerrule
      actions:
        greeting:
          inputs:
            name: Amy
            place: Paris
          annotations:
            aaa: this is an annotation
      triggers:
        locationUpdate:
          inputs:
            name: Bernie
            place: DC
          annotations:
            bbb: this is an annotation

=======================================================================
==./tests/dat/deployment-deploymentreader-test-packages.yml
=======================================================================
packages:
    triggerrule:
      actions:
        greeting:
          inputs:
            name: Amy
            place: Paris
          annotations:
            aaa: this is an annotation
      triggers:
        locationUpdate:
          inputs:
            name: Bernie
            place: DC
          annotations:
            bbb: this is an annotation

=======================================================================
==./tests/dat/deployment-deploymentreader-test.yml
=======================================================================
application:
  name: AppWithTriggerRule
  packages:
    triggerrule:
      actions:
        greeting:
          inputs:
            name: Amy
            place: Paris
          annotations:
            aaa: this is an annotation
      triggers:
        locationUpdate:
          inputs:
            name: Bernie
            place: DC
          annotations:
            bbb: this is an annotation

=======================================================================
==./tests/dat/deployment_compose_trigger.yaml
=======================================================================
project:
  name: wskdeploy-samples
  namespace: /wskdeploy/samples/

  packages:
    test_package:
      triggers:
        hello-trigger:
          namespace: /wskdeploy/samples/test/hello-trigger
          credential: 12345678ABCDEF
          inputs:
            name: Bernie
            place: Vermont

=======================================================================
==./tests/dat/deployment_data_action_with_inputs_outputs.yaml
=======================================================================
---
packages:
  actions:
    -
      function: src/hello/hello.js
      inputs:
        -
          description: "input person name"
          name: "person name"
          type: string
        -
          description: "input person address"
          name: personAddress
          type: string
      name: hello
      outputs:
        -
          description: "output greeting string"
          name: "greeting string"
          type: string
        -
          description: "output notice string"
          name: notice
          type: string
      runtime: nodejs@6
      version: 1.0
  license: Apache-2.0
  packagename: helloworld
  version: 1.0

=======================================================================
==./tests/dat/deployment_data_package.yaml
=======================================================================
package:
    name: test_package
    namespace: /wskdeploy/samples/test
    credential: 12345678ABCDEF
    inputs:
      param: value


=======================================================================
==./tests/dat/deployment_data_package_env_var.yaml
=======================================================================
package:
    name: $package_name
    namespace: /wskdeploy/samples/test
    credential: 12345678ABCDEF
    inputs:
      param: value


=======================================================================
==./tests/dat/deployment_data_packages.yaml
=======================================================================
packages:
  test_package:
    namespace: /wskdeploy/samples/test
    credential: 12345678ABCDEF
    inputs:
      param: value


=======================================================================
==./tests/dat/deployment_data_packages_env_var.yaml
=======================================================================
packages:
  $package_name:
    namespace: /wskdeploy/samples/test
    credential: 12345678ABCDEF
    inputs:
      param: value


=======================================================================
==./tests/dat/deployment_data_project.yaml
=======================================================================
project:
  name: wskdeploy-samples
  namespace: /wskdeploy/samples/
  credential: user-credential
  apiHost: 172.17.0.1


=======================================================================
==./tests/dat/deployment_data_project_package.yaml
=======================================================================
project:
  name: wskdeploy-samples
  namespace: /wskdeploy/samples/

  packages:
    test_package:
      name: test_package
      namespace: /wskdeploy/samples/test
      credential: 12345678ABCDEF
      inputs:
        param: value

=======================================================================
==./tests/dat/deployment_data_project_package_env_var.yaml
=======================================================================
project:
  name: wskdeploy-samples
  namespace: /wskdeploy/samples/

  package:
      name: ${package_name}
      namespace: /wskdeploy/samples/test
      credential: 12345678ABCDEF
      inputs:
        param: value

=======================================================================
==./tests/dat/deployment_data_project_package_env_var_con.yaml
=======================================================================
project:
  name: wskdeploy-samples
  namespace: /wskdeploy/samples/

  package:
      name: ${package_name}-${package_name}
      namespace: /wskdeploy/samples/test
      credential: 12345678ABCDEF
      inputs:
        param: value

=======================================================================
==./tests/dat/deployment_data_project_packages_env_var.yaml
=======================================================================
project:
  name: wskdeploy-samples
  namespace: /wskdeploy/samples/

  packages:
    $package_name:
      name: $package_name
      namespace: /wskdeploy/samples/test
      credential: 12345678ABCDEF
      inputs:
        param: value
    $package_name_second:
      name: $package_name_second
      namespace: /wskdeploy/samples/test
      credential: 12345678ABCDEF
      inputs:
        param: value

=======================================================================
==./tests/dat/deployment_data_project_packages_env_var_con.yaml
=======================================================================
project:
  name: wskdeploy-samples
  namespace: /wskdeploy/samples/

  packages:
    ${package_name}suffix:
      name: ${package_name}suffix
      namespace: /wskdeploy/samples/test
      credential: 12345678ABCDEF
      inputs:
        param: value
    ${package_name_second}suffix:
      name: ${package_name_second}suffix
      namespace: /wskdeploy/samples/test
      credential: 12345678ABCDEF
      inputs:
        param: value

=======================================================================
==./tests/dat/deployment_validate_action_annotations.yaml
=======================================================================
project:
    name: TestActionAnnotations
    packages:
        packageActionAnnotations:
            actions:
                helloworld:
                    inputs:
                        name: Amy
                        place: New York
                    annotations:
                        action_annotation_1: this is annotation 1
                        action_annotation_2: this is annotation 2
        packageActionAnnotationsFromDeployment:
            actions:
                helloworld:
                    inputs:
                        name: Amy
                        place: New York
                    annotations:
                        action_annotation_1: this is annotation 1 from deployment
                        action_annotation_2: this is annotation 2 from deployment
        packageActionAnnotationsWithWebAction:
            actions:
                helloworld:
                    inputs:
                        name: Amy
                        place: New York
                    annotations:
                        action_annotation_1: this is annotation 1
                        action_annotation_2: this is annotation 2
                        web-export: true

=======================================================================
==./tests/dat/deployment_validate_credentials.yaml
=======================================================================
# do not change or delete this file without changing deployers/whiskclient_test.go
# this is used for testing whiskclient functionality
project:
  name: UnitTestCredentials
  apiHost: sample.deployment.openwhisk.org
  credential: sample-deployment-credential
  namespace: sample-deployment-namespace
  packages:
    ValidateWhiskConfig:
      actions:
        helloworld:

=======================================================================
==./tests/dat/deployment_validate_deployment_reader.yaml
=======================================================================
project:
  name: UnitTestDeployers
  packages:
    ValidateDeploymentReader:
      actions:
        helloNodejs:
          inputs:
            name: Amy
            place: Paris

=======================================================================
==./tests/dat/manifest_bad_yaml_invalid_comment.yaml
=======================================================================
packages:
  testBadYAMLInvalidCommentInManifest:
    actions:
      # helloworld action in NodeJS
      helloNodejs:
        function: actions/hello.js
        inputs:
          name:
            type: string
            description: name of a person
          place:
            type: string
            /// bad comment
            description: location of a person

# go-yaml/yaml "yaml: line 13: could not find expected ':'"

=======================================================================
==./tests/dat/manifest_bad_yaml_invalid_key_mapping_value.yaml
=======================================================================
packages:
  testBadYAMLInvalidKeyMappingValueInManifest:
    version: 1.0
    license: Apache-2.0
      actions: test

# go-yaml/yaml "line 4: mapping values are not allowed in this context".

=======================================================================
==./tests/dat/manifest_bad_yaml_invalid_package_key.yaml
=======================================================================
package:
  name: testBadYAMLInvalidPackageKeyInManifest
  version: 1.0
  invalidKey: test
  license: Apache-2.0

# go-yaml/yaml "line 2: field invalidKey not found in struct parsers.Package".

=======================================================================
==./tests/dat/manifest_bad_yaml_missing_root_key.yaml
=======================================================================
actions:
  testBadYAMLMissingRootKeyInManifest:
    function: actions/hello.js

# go-yaml/yaml "line 1: field actions not found in struct parsers.YAML".


=======================================================================
==./tests/dat/manifest_data_compose_triggers.yaml
=======================================================================
package:
  name: trigger_compose
  triggers:
    trigger1:
      inputs:
        name: string
        place: string
    trigger2:
      feed: myfeed
      inputs:
        name: myname
        place: myplace

=======================================================================
==./tests/dat/manifest_data_rule_env_var.yaml
=======================================================================
# This test file is used to test the basic Trigger-Action-Rule grammar
packages:
  manifest1:
      version: 1.0
      license: Apache-2.0
      actions:
        first_action:
          function: actions/hello.js
      triggers:
        $trigger_name:
      rules:
        $rule_name:
          trigger: $trigger_name
          action: $action_name

=======================================================================
==./tests/dat/manifest_hello_java_jar.yaml
=======================================================================
package:
  name: helloworld
  actions:
    helloJava:
      function: actions/hello.jar
      runtime: java
      main: Hello

=======================================================================
==./tests/dat/manifest_hello_nodejs.yaml
=======================================================================
package:
  name: helloworld
  actions:
    helloNodejs:
      function: actions/hello.js
      runtime: nodejs:6

=======================================================================
==./tests/dat/manifest_hello_nodejs_with_params.yaml
=======================================================================
package:
   name: helloworld
   actions:
     helloWithParams:
       function: actions/hello-with-params.js
       runtime: nodejs:6
       inputs:
         name: Amy
         place: Paris

=======================================================================
==./tests/dat/manifest_hello_python.yaml
=======================================================================
package:
  name: helloworld
  actions:
    helloPython:
      function: actions/hello.py
      runtime: python

=======================================================================
==./tests/dat/manifest_hello_swift.yaml
=======================================================================
package:
  name: helloworld
  actions:
    helloSwift:
      function: actions/hello.swift
      runtime: swift

=======================================================================
==./tests/dat/manifest_invalid_package_missing.yaml
=======================================================================
  actions:
    helloNodejs:
      function: actions/hello.js
      runtime: nodejs:6
    helloJava:
      function: actions/hello.java

=======================================================================
==./tests/dat/manifest_validate_action_annotations.yaml
=======================================================================
packages:
    packageActionAnnotations:
        actions:
            helloworld:
                function: actions/hello.js
                runtime: nodejs:6
                inputs:
                    name:
                        type: string
                        description: name of a person
                    place:
                        type: string
                        description: location of a person
                outputs:
                    payload:
                        type: string
                        description: a simple greeting message, Hello World!
                annotations:
                    action_annotation_1: this is annotation 1
                    action_annotation_2: this is annotation 2
                    action_annotation_3: this is annotation 3
                    action_annotation_4: this is annotation 4
    packageActionAnnotationsFromDeployment:
        actions:
            helloworld:
                function: actions/hello.js
                runtime: nodejs:6
                inputs:
                    name:
                        type: string
                        description: name of a person
                    place:
                        type: string
                        description: location of a person
                outputs:
                    payload:
                        type: string
                        description: a simple greeting message, Hello World!
                annotations:
                    action_annotation_1: this is annotation 1
                    action_annotation_2: this is annotation 2
                    action_annotation_3: this is annotation 3
                    action_annotation_4: this is annotation 4
    packageActionAnnotationsWithWebAction:
        actions:
            helloworld:
                function: actions/hello.js
                runtime: nodejs:6
                inputs:
                    name:

=======================================================================
==./tests/dat/manifest_validate_credentials.yaml
=======================================================================
packages:
   ValidateWhiskConfig:
     apiHost: sample.manifest.openwhisk.org
     credential: sample-manifest-credential
     namespace: sample-manifest-namespace
     actions:
       # helloworld action in NodeJS
       helloworld:
         function: actions/hello.js
         runtime: nodejs:6
         inputs:
           name:
             type: string
             description: name of a person
           place:
             type: string
             description: location of a person
         outputs:
           payload:
             type: string
             description: a simple greeting message, Hello World!

=======================================================================
==./tests/dat/manifest_validate_deployment_reader.yaml
=======================================================================
packages:
  ValidateDeploymentReader:
     actions:
        # helloworld action in NodeJS
        helloNodejs:
          function: actions/hello.js
          runtime: nodejs:6
          inputs:
            name:
              type: string
              description: name of a person
            place:
              type: string
              description: location of a person
          outputs:
            payload:
              type: string
              description: a simple greeting message, Hello World!

=======================================================================
==./tests/dat/manifest_validate_feed.yaml
=======================================================================
packages:
  manifest5:
    feeds:
      feed1:
        location: https://my.company.com/services/eventHub
        credential: my_credential
        operations:
          operation1:
          operation2:


=======================================================================
==./tests/dat/manifest_validate_json_params.yaml
=======================================================================
packages:
  validate_json:
    actions:
      validate_json_params:
        function: actions/dump_params.js
        runtime: nodejs:6
        inputs:
          member1:
            type: json
            value: '{ "name": "Sam", "place": "Shire" }'
          member2: { "name": "Sam", "place": "Shire" }
          member3:
            type: json
            value: { "name": "Elrond", "place": "Rivendell" }
          member4:
            type: json
            value: { "name": "Gimli", "place": "Gondor", "age": 139, "children": { "<none>": "<none>" } }
          member5:
            type: json
            value: {
              "name": "Gloin",
              "place": "Gondor",
              "age": 235,
              "children": {
                "Gimli": "Son"
              }
            }
          member6:
            type: json
            value: { "name": "Frodo", "place": "Undying Lands", "items": [ "Sting", "Mithril mail" ] }
        outputs:
            fellowship:
              type: json

=======================================================================
==./tests/dat/manifest_validate_multiline_params.yaml
=======================================================================
packages:
    validate:
        actions:
            validate_multiline_params:
                function: actions/dump_params.js
                runtime: nodejs:6
                inputs:
                    # value only
                    param_string_value_only:
                        value: foo
                    param_int_value_only:
                        value: 123
                    param_float_value_only:
                        value: 3.14
                    # type and value only
                    param_string_type_and_value_only:
                        type: string
                        value: foo
                    # type only
                    param_string_type_only:
                        type: string
                    param_integer_type_only:
                        type: integer
                    param_float_type_only:
                        type: float
                    # No value, but with default value
                    param_string_with_default:
                        type: string
                        default: bar
                    param_integer_with_default:
                        type: integer
                        default: -1
                    param_float_with_default:
                        type: float
                        default: 2.9
                outputs:
                    payload:
                        type: string
                        description: parameter dump

=======================================================================
==./tests/dat/manifest_validate_package_grammar.yaml
=======================================================================
# This test file is used to test the basic Package grammar
packages:
  helloworld:
    version: 1.0
    license: Apache-2.0

=======================================================================
==./tests/dat/manifest_validate_package_grammar_env_var.yaml
=======================================================================
# This test file is used to test the basic Package grammar
packages:
  $package_name:
    version: 1.0
    license: Apache-2.0
  $package_name_second:
    version: 1.0
    license: Apache-2.0
  ${package_name}suffix:
    version: 1.0
    license: Apache-2.0
  ${package_name}-${package_name_second}:
    version: 1.0
    license: Apache-2.0

=======================================================================
==./tests/dat/manifest_validate_params.yaml
=======================================================================
packages:
  validateParams:
    actions:
      action1:
        inputs:
          inline1: '{ "key": true }'
          inline2: Just a string
          inline3: null
          inline4: true
          inline5: 42
          inline6: -531
          inline7: 432.432E-43
          inline8: '[ true, null, "boo", { "key": 0 }]'
          inline9: !!bool false
          inline0: !!float 456.423
          inlin10:  # JSON null
          inlin11: True # JSON true

          expand1:
            value: null
            type: string

          expand2:
            value: true
            type: string

          expand3:
            value: false
            type: string

          expand4:
            value: 15646
            type: string

          expand5:
            value: '{ "key": true }'
            type: string

          expand6:
            value:  '[ true, null, "boo", { "key": 0 }]'
            type: string

          expand7:
            value: !!null null
            type: string

=======================================================================
==./tests/dat/manifest_validate_rule.yaml
=======================================================================
packages:
  manifest4:
    rules:
      rule1:
        trigger: trigger1
        action: hellpworld
        rule: true


=======================================================================
==./tests/dat/manifest_validate_singleline_params.yaml
=======================================================================
packages:
    validate:
        actions:
            validate_singleline_params:
                function: actions/dump_params.js
                runtime: nodejs:6
                inputs:
                    # simple string
                    param_simple_string: foo
                    # simple integers
                    param_simple_integer_1: 1
                    param_simple_integer_2: 0
                    param_simple_integer_3: -1
                    param_simple_integer_4: 99999
                    param_simple_integer_5: -99999
                    # simple floats
                    param_simple_float_1: 1.1
                    param_simple_float_2: 0.0
                    param_simple_float_3: -1.1
                    # simple Environment variables
                    param_simple_env_var_1: $GOPATH
                    param_simple_env_var_2: ${GOPATH}
                    param_simple_env_var_3: ${}
                    param_simple_invalid_env_var: $DollarSignNotInEnv
                    param_simple_env_var_concat_1: ${GOPATH}/test
                    param_simple_env_var_concat_2: $GOPATH/test
                    param_simple_env_var_concat_3: ddd.ccc.${GOPATH}
                    # Empty (string)
                    param_simple_implied_empty:
                    param_simple_explicit_empty_1: ''
                    param_simple_explicit_empty_2: ""
                    # Type names (should default to a value for that type)
                    param_simple_type_string: string
                    param_simple_type_integer: integer
                    param_simple_type_float: float
                outputs:
                    payload:
                        type: string
                        description: parameter dump

=======================================================================
==./tests/dat/manifest_validate_trigger_action_rule_grammar.yaml
=======================================================================
# This test file is used to test the basic Trigger-Action-Rule grammar
packages:
  manifest2:
      version: 1.0
      license: Apache-2.0
      actions:
        first_action:
          function: actions/dump_params.js
        second_action:
          function: actions/dump_params.js
        third_action:
          function: actions/dump_params.js
      triggers:
        trigger1:
        trigger2:
      rules:
        rule1:
          trigger: trigger1
          action: first_action
        rule3:
          trigger: trigger2
          action: second_action
        rule2:
          trigger: trigger1
          action: second_action
      feeds:
        feed1:
        feed2:
        feed3:
        feed4:
      apis:
        book-club: #api name
          club: # shared base path
            books:   #path
               getBooks: get #action name:verb
               postBooks: post
               putBooks: put
               deleteBooks: delete
            members: #path
               listMembers: get #action name:verb

=======================================================================
==./tests/dat/manifest_validate_triggerfeed.yaml
=======================================================================
packages:
  manifest3:
    triggers:
      trigger1:
      trigger2:
        feed: myfeed


=======================================================================
==./tests/dat/wskprops
=======================================================================
AUTH=a4f8c502:123zO3xZCLrMN6v2BKK
APIHOST=openwhisk.ng.bluemix.net
NAMESPACE=guest
CERT=test_cert_file
KEY=test_key_file

=======================================================================
==./tests/dat/wskpropsnokeycert
=======================================================================
AUTH=a4f8c502:123zO3xZCLrMN6v2BKK
APIHOST=openwhisk.ng.bluemix.net
NAMESPACE=guest

=======================================================================
==./tests/src/integration/alarmtrigger/README.md
=======================================================================
# Test Case for Whisk Deploy

This is a test case for `wskdeploy`. This package demonstrates how to create alarm trigger. You have to specify `/whisk.system/alarms/alarm` as a `source` for alarm trigger in manifest yaml file. It takes one mandatory parameter `cron` in deployment file.

It can be deployed and tested with:

```bash
$ wskdeploy -p tests/src/integration/alarmtrigger
$ wsk activation poll
$ wsk trigger fire Every12Hours
$ wsk activation get <HelloWorldActivationID>
```

=======================================================================
==./tests/src/integration/alarmtrigger/deployment.yaml
=======================================================================
project:
    name: HelloWorldEvery12Hours
    packages:
        helloworld:
            actions:
                helloworld:
                    inputs:
                        name: Amy
                        place: Paris
            triggers:
                Every12Hours:
                    inputs:
                        cron: "0 */12 * * *"

=======================================================================
==./tests/src/integration/alarmtrigger/manifest.yaml
=======================================================================
packages:
    helloworld:
        actions:
            helloworld:
                function: actions/hello.js
                runtime: nodejs:6
                inputs:
                    name:
                        type: string
                        description: name of a person
                    place:
                        type: string
                        description: location of a person
                outputs:
                    payload:
                        type: string
                        description: a simple greeting message, Hello World!
        triggers:
            Every12Hours:
                feed: /whisk.system/alarms/alarm
        rules:
            helloworldEvery12Hours:
                action: helloworld
                trigger: Every12Hours

=======================================================================
==./tests/src/integration/apigateway/manifest.yml
=======================================================================
packages:
  api-gateway-test:
      version: 1.0
      license: Apache-2.0
      actions:
          greeting:
            version: 1.0
            function: src/greeting.js
            runtime: nodejs:6
            inputs:
              name: string
              place: string
            outputs:
              payload: string
      apis: # new top-level key for defining groups of named APIs
        book-club: #api name
          club: # shared base path
            books:   #path
               getBooks: get #action name:verb
               postBooks: post
               putBooks: put
               deleteBooks: delete
            members: #path
               listMembers: get #action name:verb
        book-club2: #api name, added for multi api definition test
              club2: # shared base path
                books2:   #path
                   getBooks2: get #action name:verb
                   postBooks2: post
                   putBooks2: put
                   deleteBooks2: delete
                members2: #path
                   listMembers2: get #action name:verb
    

=======================================================================
==./tests/src/integration/cloudant/README.md
=======================================================================
# Using Cloudant Package with `wskdeploy`

The [Cloudant usecase](https://github.com/apache/incubator-openwhisk-wskdeploy/tree/master/tests/src/integration/cloudant) demonstrates how to build an OpenWhisk app to retrieve document updates from cloudant using `wskdeploy`.

OpenWhisk supports [Cloudant package](https://github.com/apache/incubator-openwhisk-package-cloudant) which can be used to integrate with Cloudant APIs. For our simple app to display document IDs,  we need:
 
- [manifest.yaml](https://github.com/apache/incubator-openwhisk-wskdeploy/blob/master/tests/usecases/cloudant/manifest.yaml)
- [Action File](https://github.com/apache/incubator-openwhisk-wskdeploy/blob/master/tests/usecases/cloudant/src/process-change.js)

All you have to do is export following environment variables:

- CLOUDANT_USERNAME
- CLOUDANT_PASSWORD
- CLOUDANT_DATABASE (make sure that this databas exists in your cloudant instance)

These env. variables are used in manifest file for:

```yaml
        dependencies:
            # binding cloudant package named openwhisk-cloudant
            openwhisk-cloudant:
                location: /whisk.system/cloudant
                inputs:
                    username: $CLOUDANT_USERNAME
                    password: $CLOUDANT_PASSWORD
                    host: ${CLOUDANT_USERNAME}.cloudant.com
        triggers:
            # Trigger named "data-inserted-trigger"
            # Creating trigger to fire events when data is inserted into database
            data-inserted-trigger:
                source: openwhisk-cloudant/changes
                inputs:
                    dbname: $CLOUDANT_DATABASE
```

### Step 1: Deploy

Deploy it using `wskdeploy`:

```
wskdeploy -m tests/usecases/cloudant/manifest.yaml 
```

### Step 2: Verify

```
$ wsk package get cloudant-sample
$ wsk package get openwhisk-cloudant
$ wsk trigger get data-inserted-trigger 
$ wsk rule get log-change-rule 

=======================================================================
==./tests/src/integration/cloudant/manifest.yaml
=======================================================================
# Deployment using this manifest file creates following OpenWhisk components:
#   Package:    cloudant-sample
#   Package:    sample-openwhisk-cloudant
#   Action:     cloudant-sample/process-change
#   Sequence:   cloudant-sample/process-change-cloudant-sequence
#   Trigger:    sample-data-inserted-trigger
#   Rule:       sample-log-change-rule

# This manifest file reads following env. variables:
#   CLOUDANT_USERNAME
#   CLOUDANT_PASSWORD
#   CLOUDANT_DATABASE

packages:
    cloudant-sample:
        dependencies:
            # binding cloudant package named sample-openwhisk-cloudant
            sample-openwhisk-cloudant:
                location: /whisk.system/cloudant
                inputs:
                    username: $CLOUDANT_USERNAME
                    password: $CLOUDANT_PASSWORD
                    host: ${CLOUDANT_USERNAME}.cloudant.com
        triggers:
            # Trigger named "sample-data-inserted-trigger"
            # Creating trigger to fire events when data is inserted into database
            sample-data-inserted-trigger:
                source: sample-openwhisk-cloudant/changes
                inputs:
                    dbname: $CLOUDANT_DATABASE
        actions:
            # Action named "process-change"
            # Creating action that is printing data which is written to the database
            process-change:
                location: actions/process-change.js
    
        sequences:
            # Sequence named "process-change-cloudant-sequence"
            # Creating sequence to connect the cloudant "read" action with the "process-change" action
            process-change-cloudant-sequence:
                actions: sample-openwhisk-cloudant/read, process-change
        rules:
            # Rule named "sample-log-change-rule"
            # Creating rule that maps database change trigger to sequence
            sample-log-change-rule:
                trigger: sample-data-inserted-trigger
                action: process-change-cloudant-sequence

=======================================================================
==./tests/src/integration/dependency/README.md
=======================================================================
# Integration Test - Dependencies

`wskdeploy` supports dependencies where it allows you to declare other OpenWhisk
packages that your application or project (manifest) is dependent on. With declaring
dependent packages, `wskdeploy` supports automatic deployment of those dependent
packages.

For example, our `root-app` application is dependent on `child-app` package located
at https://github.com/pritidesai/child-app.
We can declare this dependency in `manifest.yaml` with:

```yaml
package:
  name: root-app
  namespace: guest
  dependencies:
    child-app:
      location: github.com/pritidesai/child-app
  triggers:
    trigger1:
  rules:
    rule1:
      trigger: trigger1
      action: child-app/hello
```

**Note:**

1. Package name of the dependent package `child-app` should match GitHub repo
name `github.com/pritidesai/child-app`.
2. `wskdeploy` creates a directory named `Packages` and clones GitHub repo of
dependent package under `Packages`. Now the repo is cloned and renamed to
`<package>-<branch>`. Here in our example, `wskdeploy` clones repo under
`Packages` and renames it to `child-app-master`.
3. Dependent packages must have `manifest.yml`.

=======================================================================
==./tests/src/integration/dependency/manifest.yaml
=======================================================================
packages:
  TestGitHubDependency:
      dependencies:
        helloworlds:
          location: github.com/apache/incubator-openwhisk-test/packages/helloworlds
      triggers:
        trigger1:
        trigger2:
      rules:
        rule1:
          trigger: trigger1
          action: helloworlds/hello-js
        rule2:
          trigger: trigger2
          action: helloworlds/helloworld-js

=======================================================================
==./tests/src/integration/flagstests/deployment.yml
=======================================================================
application:
  name: wskdeploy-samples

  packages:
    helloWorldFlags:
      actions:
        greeting:
          inputs:
            name: Bernie
            place: Vermont

=======================================================================
==./tests/src/integration/flagstests/manifest.yaml
=======================================================================
packages:
    helloWorldFlags:
      version: 1.0
      license: Apache-2.0
      actions:
        greeting:
          web-export: true
          version: 1.0
          function: src/greeting.js
          runtime: nodejs:6
          inputs:
            name: string
            place: string
          outputs:
            payload: string
      triggers:
        locationUpdateFlags:
      rules:
        myRule:
          trigger: locationUpdateFlags
          #the action name and the action file greeting.js should consistent.
          #currently the implementation deside the action name consistent with action file name?
          action: greeting
    

=======================================================================
==./tests/src/integration/flagstests/manifest.yml
=======================================================================
packages:
  helloWorldFlags:
      version: 1.0
      license: Apache-2.0
      actions:
        greeting:
          web-export: true
          version: 1.0
          function: src/greeting.js
          runtime: nodejs:6
          inputs:
            name: string
            place: string
          outputs:
            payload: string
      triggers:
        locationUpdateFlags:
      rules:
        myRule:
          trigger: locationUpdateFlags
          #the action name and the action file greeting.js should consistent.
          #currently the implementation deside the action name consistent with action file name?
          action: greeting


=======================================================================
==./tests/src/integration/helloworld/README.md
=======================================================================
# Integration Test - helloworld

### Package description

The [manifest.yaml](https://github.com/apache/incubator-openwhisk-wskdeploy/blob/master/tests/src/integration/helloworld/manifest.yaml) file defines:

- a Package named `IntegrationTestHelloWorld` which contains:
 
    - Four actions:

        - an action named `helloNodejs`
        - an action named `helloJava`
        - an action named `helloPython`
        - an action named `helloSwift`
        
    - A Sequence `hello-world-series` which includes all four actions.
    
    - A trigger `triggerHelloworld` to invoke `hello-world-series` sequence
    
    - A rule `ruleMappingHelloworld` to associate the sequence `hello-world-series` with trigger `triggerHelloworld` 

- `helloNodejs`:

    - accepts two parameters:
        - `name` (string) (default: Amy)
        - `place` (string) (default: Paris)
    - returns `Hello Amy from Paris`

- `helloJava`

    - accepts one parameter:
        - `name` (string) (default: Bob)
    - returns `Hello Bob!`
    
- `helloPython`

    - accepts one parameter:
        - `name` (string) (default: Henry)
    - returns `Hello Henry!`
    
- `helloSwift`

    - accepts one parameter:
        - `name` (string) (no default)
    - returns `Hello stranger!`


### How to deploy and test

#### Step 1. Deploy 

=======================================================================
==./tests/src/integration/helloworld/deployment.yaml
=======================================================================
project:
  name: IntegrationTest
  packages:
    IntegrationTestHelloWorld:
      actions:
        helloNodejs:
          inputs:
            name: Amy
            place: Paris
        helloJava:
          inputs:
            name: Bob
        helloPython:
          inputs:
            name: Henry
        helloSwift:

=======================================================================
==./tests/src/integration/helloworld/manifest.yaml
=======================================================================
packages:
  IntegrationTestHelloWorld:
      actions:
        # helloworld action in NodeJS
        helloNodejs:
          function: actions/hello.js
          runtime: nodejs:6
          inputs:
            name:
              type: string
              description: name of a person
            place:
              type: string
              description: location of a person
          outputs:
            payload:
              type: string
              description: a simple greeting message, Hello World!
        # helloworld action in Java
        helloJava:
          function: actions/hello.jar
          main: Hello
          runtime: java
          inputs:
            name:
              type: string
              description: name of a person
          outputs:
            payload:
              type: string
              description: a simple greeting message, Hello Bob!
        # helloworld action in python
        helloPython:
          function: actions/hello.py
          runtime: python
          inputs:
            name:
              type: string
              description: name of a person
          outputs:
            payload:
              type: string
              description: a simple greeting message, Hello Henry!
        # helloworld action in swift
        helloSwift:
          function: actions/hello.swift
          runtime: swift:3.1.1
          inputs:
            name:
              type: string

=======================================================================
==./tests/src/integration/jaraction/manifest.yaml
=======================================================================
packages:
    IntegrationTestHelloworldJar:
        actions:
            hellojaraction:
                function: src/hello.jar
                runtime: java
                main: Hello

=======================================================================
==./tests/src/integration/managed-deployment/00-manifest-minus-second-package.yaml
=======================================================================
project:
    name: MyFirstManagedProject
    packages:
        ManagedPackage-1:
            actions:
                HelloWorld-1:
                    function: actions/hello.js
                    runtime: nodejs:6
                    inputs:
                        name:
                            type: string
                            description: name of a person
                        place:
                            type: string
                            description: location of a person
                    outputs:
                        payload:
                            type: string
                            description: a simple greeting message, Hello World!
                HelloWorld-2:
                    function: actions/hello.js
                    runtime: nodejs:6
                    inputs:
                        name:
                            type: string
                            description: name of a person
                        place:
                            type: string
                            description: location of a person
                    outputs:
                        payload:
                            type: string
                            description: a simple greeting message, Hello World!
                HelloWorld-3:
                    function: actions/hello.js
                    runtime: nodejs:6
                    inputs:
                        name:
                            type: string
                            description: name of a person
                        place:
                            type: string
                            description: location of a person
                    outputs:
                        payload:
                            type: string
                            description: a simple greeting message, Hello World!
            sequences:
                ManagedSequence-1:
                    actions: HelloWorld-1, HelloWorld-2, HelloWorld-3

=======================================================================
==./tests/src/integration/managed-deployment/01-manifest-minus-sequence-2.yaml
=======================================================================
project:
    name: MyFirstManagedProject
    packages:
        ManagedPackage-1:
            actions:
                HelloWorld-1:
                    function: actions/hello.js
                    runtime: nodejs:6
                    inputs:
                        name:
                            type: string
                            description: name of a person
                        place:
                            type: string
                            description: location of a person
                    outputs:
                        payload:
                            type: string
                            description: a simple greeting message, Hello World!
                HelloWorld-2:
                    function: actions/hello.js
                    runtime: nodejs:6
                    inputs:
                        name:
                            type: string
                            description: name of a person
                        place:
                            type: string
                            description: location of a person
                    outputs:
                        payload:
                            type: string
                            description: a simple greeting message, Hello World!
                HelloWorld-3:
                    function: actions/hello.js
                    runtime: nodejs:6
                    inputs:
                        name:
                            type: string
                            description: name of a person
                        place:
                            type: string
                            description: location of a person
                    outputs:
                        payload:
                            type: string
                            description: a simple greeting message, Hello World!
            sequences:
                ManagedSequence-1:
                    actions: HelloWorld-1, HelloWorld-2, HelloWorld-3

=======================================================================
==./tests/src/integration/managed-deployment/02-manifest-minus-action-3.yaml
=======================================================================
project:
    name: MyFirstManagedProject
    packages:
        ManagedPackage-1:
            actions:
                HelloWorld-1:
                    function: actions/hello.js
                    runtime: nodejs:6
                    inputs:
                        name:
                            type: string
                            description: name of a person
                        place:
                            type: string
                            description: location of a person
                    outputs:
                        payload:
                            type: string
                            description: a simple greeting message, Hello World!
                HelloWorld-2:
                    function: actions/hello.js
                    runtime: nodejs:6
                    inputs:
                        name:
                            type: string
                            description: name of a person
                        place:
                            type: string
                            description: location of a person
                    outputs:
                        payload:
                            type: string
                            description: a simple greeting message, Hello World!
            sequences:
                ManagedSequence-1:
                    actions: HelloWorld-1, HelloWorld-2
            triggers:
                ManagedTrigger-1:
            rules:
                ManagedRule-1:
                    action: ManagedSequence-1
                    trigger: ManagedTrigger-1


=======================================================================
==./tests/src/integration/managed-deployment/03-manifest-minus-trigger.yaml
=======================================================================
project:
    name: MyFirstManagedProject
    packages:
        ManagedPackage-1:
            actions:
                HelloWorld-1:
                    function: actions/hello.js
                    runtime: nodejs:6
                    inputs:
                        name:
                            type: string
                            description: name of a person
                        place:
                            type: string
                            description: location of a person
                    outputs:
                        payload:
                            type: string
                            description: a simple greeting message, Hello World!
                HelloWorld-2:
                    function: actions/hello.js
                    runtime: nodejs:6
                    inputs:
                        name:
                            type: string
                            description: name of a person
                        place:
                            type: string
                            description: location of a person
                    outputs:
                        payload:
                            type: string
                            description: a simple greeting message, Hello World!
            sequences:
                ManagedSequence-1:
                    actions: HelloWorld-1, HelloWorld-2


=======================================================================
==./tests/src/integration/managed-deployment/04-manifest-minus-package.yaml
=======================================================================
project:
    name: MyFirstManagedProject
    packages:


=======================================================================
==./tests/src/integration/managed-deployment/manifest.yaml
=======================================================================
project:
    name: MyFirstManagedProject
    packages:
        ManagedPackage-1:
            actions:
                HelloWorld-1:
                    function: actions/hello.js
                    runtime: nodejs:6
                    inputs:
                        name:
                            type: string
                            description: name of a person
                        place:
                            type: string
                            description: location of a person
                    outputs:
                        payload:
                            type: string
                            description: a simple greeting message, Hello World!
                HelloWorld-2:
                    function: actions/hello.js
                    runtime: nodejs:6
                    inputs:
                        name:
                            type: string
                            description: name of a person
                        place:
                            type: string
                            description: location of a person
                    outputs:
                        payload:
                            type: string
                            description: a simple greeting message, Hello World!
                HelloWorld-3:
                    function: actions/hello.js
                    runtime: nodejs:6
                    inputs:
                        name:
                            type: string
                            description: name of a person
                        place:
                            type: string
                            description: location of a person
                    outputs:
                        payload:
                            type: string
                            description: a simple greeting message, Hello World!
            sequences:
                ManagedSequence-1:
                    actions: HelloWorld-1, HelloWorld-2, HelloWorld-3

=======================================================================
==./tests/src/integration/message-hub/README.md
=======================================================================
# Test Case of message hub

This is a test case for message hub. Before running this use case, please make sure you have set the following
environment variables on your machine: MESSAGEHUB_ADMIN_HOST, KAFKA_BROKERS_SASL, SOURCE_TOPIC and DESTINATION_TOPIC.
 
The environment variables, SOURCE_TOPIC and DESTINATION_TOPIC, are two topic names in message hub service. Both of them
must be available in the message hub service you are about to use. The variable MESSAGEHUB_ADMIN_HOST specifies the url
link of the admin host for the message hub. The variable KAFKA_BROKERS_SASL specifies the array of the kafka brokers, e.g.
[kafka01-prod01.messagehub.services.net:9093 kafka02-prod01.messagehub.services.net:9093].

It can be deployed and tested with:

```bash
$ wskdeploy -p tests/src/integration/message-hub
```

=======================================================================
==./tests/src/integration/message-hub/deployment.yaml
=======================================================================
project:
    name: DataProcessingApp
    packages:
        data-processing-with-messagehub:
            actions:
                process-messages-received-from-messagehub:
                    inputs:
                        messagehub_instance: wskdeployMessageHub
                        topic:  $DESTINATION_TOPIC
            triggers:
                wskdeployIntegrationTestMessageHubTrigger:
                    inputs:
                        isJSONData: true
                        topic: $SOURCE_TOPIC


=======================================================================
==./tests/src/integration/message-hub/manifest.yaml
=======================================================================
packages:
    data-processing-with-messagehub:
        dependencies:
            wskdeployMessageHub:
                location: /whisk.system/messaging
                inputs:
                    user: $MESSAGEHUB_USER
                    password: $MESSAGEHUB_PASSWORD
                    kafka_admin_url: $MESSAGEHUB_ADMIN_HOST
                    kafka_brokers_sasl: $KAFKA_BROKERS_SASL
                    topic: $SOURCE_TOPIC
        actions:
            receive-messages-from-messagehub:
                function: src/receive-messages.js
                runtime: nodejs:6
            process-messages-received-from-messagehub:
                function: src/process-messages.js
                runtime: nodejs:6
        sequences:
            data-processing-sequence:
                actions: receive-messages-from-messagehub, process-messages-received-from-messagehub
        triggers:
            wskdeployIntegrationTestMessageHubTrigger:
                feed: wskdeployMessageHub/messageHubFeed
        rules:
            data-processing-rule:
                trigger: wskdeployIntegrationTestMessageHubTrigger
                action: data-processing-sequence



=======================================================================
==./tests/src/integration/message-hub/src/events.json
=======================================================================
{
  "events": [{
    "id": "1",
    "eventType": "update",
    "timestamp": "2017-09-01T11:11:11.111+02",
    "payload": {
      "category": 4,
      "name": "Harvey",
      "location": "Houston"
    }
  }, {
    "id": "2",
    "eventType": "update",
    "timestamp": "2017-09-10T11:11:11.111+02",
    "payload": {
      "category": 3,
      "name": "Irma",
      "location": "Florida"
    }
  },
    {
      "id": "3",
      "eventType": "update",
      "timestamp": "2017-09-15T11:11:11.111+02",
      "payload": {
        "category": 1,
        "name": "Jose",
        "location": "New York"
      }
    }, {
    "id": "4",
    "eventType": "update",
    "timestamp": "2017-09-20T11:11:11.111+02",
    "payload": {
      "category": 4,
      "name": "Maria",
      "location": "Puerto Rico"
    }
  }]
}


=======================================================================
==./tests/src/integration/runtimetests/manifest.yaml
=======================================================================
packages:
    TestExplicitRuntimes:
        version: 1.0
        license: Apache-1.0
        actions:
            greetingnodejs6-with-explicit-runtime:
                web-export: true
                version: 1.0
                function: src/greeting.js
                runtime: nodejs:6
                inputs:
                    name: string
                    place: string
                outputs:
                    payload: string
            greetingnodejs8-with-explicit-runtime:
                web-export: true
                version: 1.0
                function: src/greeting.js
                runtime: nodejs:8
                inputs:
                    name: string
                    place: string
                outputs:
                    payload: string
            greetingphp-with-explicit-runtime:
                web-export: true
                version: 1.0
                function: src/hello.php
                runtime: php:7.1
                inputs:
                    name: string
                    place: string
                outputs:
                    payload: string
            greetingpython-with-explicit-runtime:
                web-export: true
                version: 1.0
                function: src/hello.py
                runtime: python
                inputs:
                    name: string
                    place: string
                outputs:
                    payload: string
            greetingpython2-with-explicit-runtime:
                web-export: true
                version: 1.0
                function: src/hello.py
                runtime: python:2

=======================================================================
==./tests/src/integration/runtimetests/src/hello.swift
=======================================================================
func main(args: [String:Any]) -> [String:Any] {
    if let name = args["name"] as? String {
        return [ "greeting" : "Hello \(name)!" ]
    } else {
        return [ "greeting" : "Hello stranger!" ]
    }
}

=======================================================================
==./tests/src/integration/runtimetests/src/helloworld/package.json
=======================================================================
{
	"name": "hello-world-sample",
	"description": "",
	"license": "Apache-2.0",
	"repository": {
		"type": "git",
		"url": "https://github.com/apache/incubator-openwhisk-wskdeploy"
	},
	"version": "1.0.0",
	"main": "index.js",
	"dependencies": {
		"string-format": "0.5.0"
	}
}

=======================================================================
==./tests/src/integration/runtimetests/src/helloworld/node_modules/string-format/README.md
=======================================================================
# String::format

String::format is a small JavaScript library for formatting strings, based on
Python's [`str.format()`][1]. For example:

```javascript
'"{firstName} {lastName}" <{email}>'.format(user)
// => '"Jane Smith" <jsmith@example.com>'
```

The equivalent concatenation:

```javascript
'"' + user.firstName + ' ' + user.lastName + '" <' + user.email + '>'
// => '"Jane Smith" <jsmith@example.com>'
```

### Installation

#### Node

1.  Install:

        $ npm install string-format

2.  Require:

        var format = require('string-format')

#### Browser

1.  Define `window.format`:

        <script src="path/to/string-format.js"></script>

### Modes

String::format can be used in two modes: [function mode](#function-mode) and
[method mode](#method-mode).

#### Function mode

```javascript
format('Hello, {}!', 'Alice')
// => 'Hello, Alice!'
```

In this mode the first argument is a template string and the remaining
arguments are values to be interpolated.


=======================================================================
==./tests/src/integration/runtimetests/src/helloworld/node_modules/string-format/package.json
=======================================================================
{
  "_args": [
    [
      {
        "raw": "string-format@0.5.0",
        "scope": null,
        "escapedName": "string-format",
        "name": "string-format",
        "rawSpec": "0.5.0",
        "spec": "0.5.0",
        "type": "version"
      },
      ""
    ]
  ],
  "_from": "string-format@0.5.0",
  "_id": "string-format@0.5.0",
  "_inCache": true,
  "_location": "/string-format",
  "_npmUser": {
    "name": "davidchambers",
    "email": "dc@davidchambers.me"
  },
  "_npmVersion": "1.4.28",
  "_phantomChildren": {},
  "_requested": {
    "raw": "string-format@0.5.0",
    "scope": null,
    "escapedName": "string-format",
    "name": "string-format",
    "rawSpec": "0.5.0",
    "spec": "0.5.0",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/string-format/-/string-format-0.5.0.tgz",
  "_shasum": "bfc4a69a250f17f273d97336797daf5dca6ecf30",
  "_shrinkwrap": null,
  "_spec": "string-format@0.5.0",
  "_where": "",
  "author": {
    "name": "David Chambers",
    "email": "dc@davidchambers.me"
  },
  "bugs": {
    "url": "https://github.com/davidchambers/string-format/issues"
  },
  "dependencies": {},

=======================================================================
==./tests/src/integration/triggerrule/deployment.yml
=======================================================================
application:
  name: wskdeploy-samples

  packages:
    helloWorldTriggerRule:
      actions:
        greeting:
          inputs:
            name: Bernie
            place: Vermont

=======================================================================
==./tests/src/integration/triggerrule/manifest.yml
=======================================================================
packages:
  helloWorldTriggerRule:
      version: 1.0
      license: Apache-2.0
      actions:
        greeting:
          version: 1.0
          function: src/greeting.js
          runtime: nodejs:6
          inputs:
            name: string
            place: string
          outputs:
            payload: string
      triggers:
        locationUpdateTriggerRule:
      rules:
        myRuleTriggerRule:
          trigger: locationUpdateTriggerRule
          #the action name and the action file greeting.js should consistent.
          #currently the implementation decide the action name consistent with action file name?
          action: greeting

=======================================================================
==./tests/src/integration/validate-action-annotations/deployment-with-invalid-annotations.yaml
=======================================================================
project:
    name: TestActionAnnotations
    packages:
        packageActionAnnotations:
            actions:
                helloworld:
                    inputs:
                        name: Amy
                        place: New York
                    annotations:
                        action_annotation_5: this is annotation 5
                        action_annotation_6: this is annotation 6
        packageActionAnnotationsWithWebAction:
            actions:
                helloworld:
                    inputs:
                        name: Amy
                        place: New York
                    annotations:
                        action_annotation_5: this is annotation 5
                        action_annotation_6: this is annotation 6
                        web-export: true

=======================================================================
==./tests/src/integration/validate-action-annotations/deployment.yaml
=======================================================================
project:
    name: TestActionAnnotations
    packages:
        packageActionAnnotations:
            actions:
                helloworld:
                    inputs:
                        name: Amy
                        place: New York
                    annotations:
                        action_annotation_1: this is annotation 1
                        action_annotation_2: this is annotation 2
        packageActionAnnotationsFromDeployment:
            actions:
                helloworld:
                    inputs:
                        name: Amy
                        place: New York
                    annotations:
                        action_annotation_1: this is annotation 1 from deployment
                        action_annotation_2: this is annotation 2 from deployment
        packageActionAnnotationsWithWebAction:
            actions:
                helloworld:
                    inputs:
                        name: Amy
                        place: New York
                    annotations:
                        action_annotation_1: this is annotation 1
                        action_annotation_2: this is annotation 2
                        web-export: true

=======================================================================
==./tests/src/integration/validate-action-annotations/manifest.yaml
=======================================================================
packages:
    packageActionAnnotations:
        actions:
            helloworld:
                function: actions/hello.js
                runtime: nodejs:6
                inputs:
                    name:
                        type: string
                        description: name of a person
                    place:
                        type: string
                        description: location of a person
                outputs:
                    payload:
                        type: string
                        description: a simple greeting message, Hello World!
                annotations:
                    action_annotation_1: this is annotation 1
                    action_annotation_2: this is annotation 2
                    action_annotation_3: this is annotation 3
                    action_annotation_4: this is annotation 4
    packageActionAnnotationsFromDeployment:
        actions:
            helloworld:
                function: actions/hello.js
                runtime: nodejs:6
                inputs:
                    name:
                        type: string
                        description: name of a person
                    place:
                        type: string
                        description: location of a person
                outputs:
                    payload:
                        type: string
                        description: a simple greeting message, Hello World!
                annotations:
                    action_annotation_1: this is annotation 1
                    action_annotation_2: this is annotation 2
                    action_annotation_3: this is annotation 3
                    action_annotation_4: this is annotation 4
    packageActionAnnotationsWithWebAction:
        actions:
            helloworld:
                function: actions/hello.js
                runtime: nodejs:6
                inputs:
                    name:

=======================================================================
==./tests/src/integration/validate-application-and-project/deployment-with-application.yaml
=======================================================================
application:
  name: IntegrationTest
  packages:
    packageValidatingApplication:
      actions:
        hello:
          inputs:
            name: Amy
            place: Paris

=======================================================================
==./tests/src/integration/validate-application-and-project/deployment-with-project.yaml
=======================================================================
project:
  name: IntegrationTest
  packages:
    packageValidatingProject:
      actions:
        hello:
          inputs:
            name: Amy
            place: Paris

=======================================================================
==./tests/src/integration/validate-application-and-project/manifest-with-application.yaml
=======================================================================
packages:
    packageValidatingApplication:
        actions:
            hello:
                function: actions/hello.js
                runtime: nodejs:6
                inputs:
                    name:
                        type: string
                        description: name of a person
                    place:
                        type: string
                        description: location of a person
                outputs:
                    payload:
                        type: string
                        description: a simple greeting message, Hello World!


=======================================================================
==./tests/src/integration/validate-application-and-project/manifest-with-project.yaml
=======================================================================
packages:
    packageValidatingProject:
        actions:
            hello:
                function: actions/hello.js
                runtime: nodejs:6
                inputs:
                    name:
                        type: string
                        description: name of a person
                    place:
                        type: string
                        description: location of a person
                outputs:
                    payload:
                        type: string
                        description: a simple greeting message, Hello World!


=======================================================================
==./tests/src/integration/validate-binding-inputs-annotations/deployment.yaml
=======================================================================
project:
    name: BindingTest
    packages:
        packagebinding:
            inputs:
                name: daisy
                city: Beijing
            actions:
                helloworld:
                    inputs:
                        name: Amy
                        place: Paris
            triggers:
                dbtrigger:
                    inputs:
                        dbname: cats
                        docid: 1234567
        packageBindingFromDeployment:
            annotations:
                package_annotation_1: this is a package annotation 1 from deployment
            actions:
                helloworld:
                    annotations:
                        action_annotation_1: this is an action annotation 1 from deployment
            triggers:
                dbtrigger1:
                    annotations:
                        trigger_annotation_1: this is a trigger annotation 1 from deployment

=======================================================================
==./tests/src/integration/validate-binding-inputs-annotations/manifest.yaml
=======================================================================
packages:
    packagebinding:
        annotations:
            package_annotation_1: this is a package annotation 1
            package_annotation_2: this is a package annotation 2
        actions:
            helloworld:
                function: actions/helloworld.js
                runtime: nodejs:6
                inputs:
                    name:
                        type: string
                        description: name of a person
                    place:
                        type: string
                        description: location of a person
                outputs:
                    payload:
                        type: string
                        description: a simple greeting message, Hello World!
                annotations:
                    action_annotation_1: this is an action annotation 1
                    action_annotation_2: this is an action annotation 2
        triggers:
            dbtrigger:
                inputs:
                    dbname:
                        type: string
                        description: name of a database
                    docid:
                        type: string
                        description: doc ID
                annotations:
                    trigger_annotation_1: this is a trigger annotation 1
                    trigger_annotation_2: this is a trigger annotation 2
    packageBindingFromDeployment:
        annotations:
            package_annotation_1: this is a package annotation 1
            package_annotation_2: this is a package annotation 2
        actions:
            helloworld:
                function: actions/helloworld.js
                runtime: nodejs:6
                annotations:
                    action_annotation_1: this is an action annotation 1
                    action_annotation_2: this is an action annotation 2
        triggers:
            dbtrigger1:
                annotations:
                    trigger_annotation_1: this is a trigger annotation 1

=======================================================================
==./tests/src/integration/validate-manifest-deployment-file-extensions/deployment.yaml
=======================================================================
project:
  name: IntegrationTest
  packages:
    ValidateYAMLExtension:
      actions:
        helloNodejs:
          inputs:
            name: Harvey
            place: Houston

=======================================================================
==./tests/src/integration/validate-manifest-deployment-file-extensions/deployment.yml
=======================================================================
application:
  name: IntegrationTest
  packages:
    ValidateYMLExtension:
      actions:
        helloNodejs:
          inputs:
            name: Irma
            place: Florida

=======================================================================
==./tests/src/integration/validate-manifest-deployment-file-extensions/manifest.yaml
=======================================================================
packages:
  ValidateYAMLExtension:
      actions:
        # helloworld action in NodeJS
        helloworld:
          function: actions/hello.js
          runtime: nodejs:6
          inputs:
            name:
              type: string
              description: name of a person
            place:
              type: string
              description: location of a person
          outputs:
            payload:
              type: string
              description: a simple greeting message, Hello World!
      triggers:
        # trigger to activate helloworld action
        trigger-for-valid-manifest-yaml:
      rules:
        # rule associating trigger with helloworld action
        rule-for-valid-manifest-yaml:
          trigger: trigger-for-valid-manifest-yaml
          action: helloworld




=======================================================================
==./tests/src/integration/validate-manifest-deployment-file-extensions/manifest.yml
=======================================================================
packages:
  ValidateYMLExtension:
      actions:
        # helloworld action in NodeJS
        helloworld:
          function: actions/hello.js
          runtime: nodejs:6
          inputs:
            name:
              type: string
              description: name of a person
            place:
              type: string
              description: location of a person
          outputs:
            payload:
              type: string
              description: a simple greeting message, Hello World!
      triggers:
        # trigger to activate helloworld action
        trigger-for-valid-manifest-yml:
      rules:
        # rule associating trigger with helloworld action
        rule-for-valid-manifest-yml:
          trigger: trigger-for-valid-manifest-yml
          action: helloworld




=======================================================================
==./tests/src/integration/validate-manifest-deployment-file-extensions/not-standard-deployment.yaml
=======================================================================
project:
  name: IntegrationTest
  packages:
    ValidateNotStandardFileNames:
      actions:
        helloNodejs:
          inputs:
            name: Jose
            place: Atlantic Ocean

=======================================================================
==./tests/src/integration/validate-manifest-deployment-file-extensions/not-standard-manifest.yaml
=======================================================================
packages:
  ValidateNotStandardFileNames:
      actions:
        # helloworld action in NodeJS
        helloworld:
          function: actions/hello.js
          runtime: nodejs:6
          inputs:
            name:
              type: string
              description: name of a person
            place:
              type: string
              description: location of a person
          outputs:
            payload:
              type: string
              description: a simple greeting message, Hello World!
      triggers:
        # trigger to activate helloworld action
        trigger-for-not-standard-file-names:
      rules:
        # rule associating trigger with helloworld action
        rule-for-not-standard-file-names:
          trigger: trigger-for-not-standard-file-names
          action: helloworld




=======================================================================
==./tests/src/integration/validate-manifest-deployment-file-extensions/random-name-1.yaml
=======================================================================
packages:
  ValidateRandomFileNames:
      actions:
        # helloworld action in NodeJS
        helloworld:
          function: actions/hello.js
          runtime: nodejs:6
          inputs:
            name:
              type: string
              description: name of a person
            place:
              type: string
              description: location of a person
          outputs:
            payload:
              type: string
              description: a simple greeting message, Hello World!
      triggers:
        # trigger to activate helloworld action
        trigger-for-random-file-names:
      rules:
        # rule associating trigger with helloworld action
        rule-for-random-file-names:
          trigger: trigger-for-random-file-names
          action: helloworld




=======================================================================
==./tests/src/integration/validate-manifest-deployment-file-extensions/random-name-2.yaml
=======================================================================
project:
  name: IntegrationTest
  packages:
    ValidateRandomFileNames:
      actions:
        helloNodejs:
          inputs:
            name: Katia
            place: Gulf of Mexico

=======================================================================
==./tests/src/integration/validate-manifest-deployment-file-extensions/yaml-deployment-with-yml-manifest.yaml
=======================================================================
project:
  name: IntegrationTest
  packages:
    ValidateYMLManifestWithYAMLDeployment:
      actions:
        helloNodejs:
          inputs:
            name: Harvey
            place: Houston

=======================================================================
==./tests/src/integration/validate-manifest-deployment-file-extensions/yaml-manifest-with-yml-deployment.yaml
=======================================================================
packages:
  ValidateYAMLManifestWithYMLDeployment:
      actions:
        # helloworld action in NodeJS
        helloworld:
          function: actions/hello.js
          runtime: nodejs:6
          inputs:
            name:
              type: string
              description: name of a person
            place:
              type: string
              description: location of a person
          outputs:
            payload:
              type: string
              description: a simple greeting message, Hello World!
      triggers:
        # trigger to activate helloworld action
        trigger-for-yaml-manifest-yml-deployment:
      rules:
        # rule associating trigger with helloworld action
        rule-for-yaml-manifest-yml-deployment:
          trigger: trigger-for-yaml-manifest-yml-deployment
          action: helloworld




=======================================================================
==./tests/src/integration/validate-manifest-deployment-file-extensions/yml-deployment-with-yaml-manifest.yml
=======================================================================
application:
  name: IntegrationTest
  packages:
    ValidateYAMLManifestWithYMLDeployment:
      actions:
        helloNodejs:
          inputs:
            name: Harvey
            place: Houston

=======================================================================
==./tests/src/integration/validate-manifest-deployment-file-extensions/yml-manifest-with-yaml-deployment.yml
=======================================================================
packages:
  ValidateYMLManifestWithYAMLDeployment:
      actions:
        # helloworld action in NodeJS
        helloworld:
          function: actions/hello.js
          runtime: nodejs:6
          inputs:
            name:
              type: string
              description: name of a person
            place:
              type: string
              description: location of a person
          outputs:
            payload:
              type: string
              description: a simple greeting message, Hello World!
      triggers:
        # trigger to activate helloworld action
        trigger-for-yml-manifest-yaml-deployment:
      rules:
        # rule associating trigger with helloworld action
        rule-for-yml-manifest-yaml-deployment:
          trigger: trigger-for-yml-manifest-yaml-deployment
          action: helloworld




=======================================================================
==./tests/src/integration/validate-package-in-manifest/deployment.yaml
=======================================================================
project:
  name: IntegrationTest
  packages:
    usingPackageInManifest:
      actions:
        helloNodejs-1:
          inputs:
            name: Amy
            place: Paris
        helloNodejs-3:
          inputs:
            name: Arthur
            place: Hawaii

=======================================================================
==./tests/src/integration/validate-package-in-manifest/manifest.yaml
=======================================================================
package:
    name: usingPackageInManifest
    dependencies:
        hellowhisk:
            location: github.com/apache/incubator-openwhisk-test/packages/hellowhisk
        myhelloworlds:
            location: github.com/apache/incubator-openwhisk-test/packages/helloworlds
    actions:
        helloNodejs-1:
            function: actions/hello.js
            runtime: nodejs:6
            inputs:
                name:
                    type: string
                    description: name of a person
                place:
                    type: string
                    description: location of a person
            outputs:
                payload:
                    type: string
                    description: a simple greeting message, Hello World!
        helloNodejs-2:
            function: actions/hello.js
            runtime: nodejs:6
        helloNodejs-3:
            function: actions/hello.js
            runtime: nodejs:6
            inputs:
                name:
                    type: string
                    description: name of a person
                place:
                    type: string
                    description: location of a person
    sequences:
        helloworldnodejs-series:
            actions: helloNodejs-1, helloNodejs-2, helloNodejs-3, hellowhisk/greeting, hellowhisk/httpGet, myhelloworlds/hello-js
    triggers:
        triggerNodeJS:
    rules:
        ruleNodeJS:
            trigger: triggerNodeJS
            action: helloworldnodejs-series

=======================================================================
==./tests/src/integration/validate-packages-in-manifest/deployment.yaml
=======================================================================
project:
  name: IntegrationTest
  packages:
    packageNodeJS:
      actions:
        helloNodejs-1:
          inputs:
            name: Amy
            place: Paris
        helloNodejs-3:
          inputs:
            name: Arthur
            place: Hawaii
    packagePython:
      actions:
        helloPython-1:
          inputs:
            name: Henry
        helloPython-2:
          inputs:
            name: Alex
    packageJava:
      actions:
        helloJava-1:
          inputs:
            name: Bob

=======================================================================
==./tests/src/integration/validate-packages-in-manifest/manifest.yaml
=======================================================================
packages:
    packageNodeJS:
#        dependencies:
#            hellowhisk:
#                location: github.com/apache/incubator-openwhisk-test/packages/hellowhisk
#            myhelloworlds:
#                location: github.com/apache/incubator-openwhisk-test/packages/helloworlds
        actions:
            helloNodejs-1:
                function: actions/hello.js
                runtime: nodejs:6
                inputs:
                    name:
                        type: string
                        description: name of a person
                    place:
                        type: string
                        description: location of a person
                outputs:
                    payload:
                        type: string
                        description: a simple greeting message, Hello World!
            helloNodejs-2:
                function: actions/hello.js
                runtime: nodejs:6
            helloNodejs-3:
                function: actions/hello.js
                runtime: nodejs:6
                inputs:
                    name:
                        type: string
                        description: name of a person
                    place:
                        type: string
                        description: location of a person
        sequences:
            helloworldnodejs-series:
                actions: helloNodejs-1, helloNodejs-2, helloNodejs-3 #, hellowhisk/greeting, hellowhisk/httpGet, myhelloworlds/hello-js
        triggers:
            triggerNodeJS1:
        rules:
            ruleNodeJS1:
                trigger: triggerNodeJS1
                action: helloworldnodejs-series
    packagePython:
#        dependencies:
#            hellowhisk:
#                location: github.com/apache/incubator-openwhisk-test/packages/hellowhisk
#            helloworlds:
#                location: github.com/apache/incubator-openwhisk-test/packages/helloworlds

=======================================================================
==./tests/src/integration/validatePackageInDeployment/deployment.yaml
=======================================================================
project:
  name: IntegrationTestPackageInDeployment
  package:
    name: TestPackageInDeploymentFile
    actions:
      helloworld:
        inputs:
          name: Amy Validating Package
          place: California

=======================================================================
==./tests/src/integration/validatePackageInDeployment/manifest.yaml
=======================================================================
packages:
  TestPackageInDeploymentFile:
      actions:
        helloworld:
          function: actions/helloworld.js
          runtime: nodejs:6
          inputs:
            name: string
            place: string
          outputs:
            payload: string


=======================================================================
==./tests/src/integration/validatePackagesInDeployment/deployment.yaml
=======================================================================
project:
  name: IntegrationTestPackagesInDeployment
  packages:
    TestPackagesInDeploymentFile:
      actions:
        helloworld:
          inputs:
            name: Amy Validating Packages
            place: California

=======================================================================
==./tests/src/integration/validatePackagesInDeployment/manifest.yaml
=======================================================================
packages:
  TestPackagesInDeploymentFile:
      actions:
        helloworld:
          function: actions/helloworld.js
          runtime: nodejs:6
          inputs:
            name: string
            place: string
          outputs:
            payload: string


=======================================================================
==./tests/src/integration/webaction/manifest.yml
=======================================================================
packages:
    IntegrationTestWebAction:
        actions:
            greeting-web-action:
                web-export: true
                version: 1.0
                function: src/greeting.js
                runtime: nodejs:6
                inputs:
                    name: string
                    place: string
                outputs:
                    payload: string
            greeting-web-action-1:
                web-export: yes
                version: 1.0
                function: src/greeting.js
                runtime: nodejs:6
                inputs:
                    name: string
                    place: string
                outputs:
                    payload: string
            greeting-with-raw-http:
                web-export: raw
                version: 1.0
                function: src/greeting.js
                runtime: nodejs:6
        triggers:
            webActionTrigger:
        rules:
            webActionRule:
                trigger: webActionTrigger
                action: greeting-web-action


=======================================================================
==./tests/src/integration/zipaction/deployment.yml
=======================================================================
application:
  name: wskdeploy-samples
  packages:
    zipaction:
      actions:
        cat:
          inputs:
            name: Bernie
            place: Vermont

=======================================================================
==./tests/src/integration/zipaction/manifest.yml
=======================================================================
packages:
  zipaction:
      version: 1.0
      license: Apache-2.0
      actions:
        cat:
          version: 1.0
          function: actions/cat
          runtime: nodejs:6
          inputs:
            name: string
            place: string
          outputs:
            payload: string


=======================================================================
==./tests/src/integration/zipaction/actions/cat/package.json
=======================================================================
{
  "name": "my-action",
  "main": "index.js",
  "dependencies" : {
    "cat" : "0.2.0"
  }
}

=======================================================================
==./tests/src/integration/zipaction/actions/cat/node_modules/cat/README.md
=======================================================================
# cat

cat will read the contents of an url. it's available through npm

    npm install cat

it will read your files

```js
var cat = require('cat');

cat('myfile.txt', console.log);             // reads the file as utf-8 and returns it output
cat('file://myfile.txt', console.log);      // same as above
```

and your `http` / `https` urls

```js
cat('http://google.com', console.log);      // cat also follows any redirects
cat('https://github.com', console.log);     // and cat read https
cat('http://fail.google.com', console.log); // if a status code != 2xx is received it will
                                            // call the callback with an error.

```

=======================================================================
==./tests/src/integration/zipaction/actions/cat/node_modules/cat/package.json
=======================================================================
{
  "_args": [
    [
      {
        "raw": "cat@0.2.0",
        "scope": null,
        "escapedName": "cat",
        "name": "cat",
        "rawSpec": "0.2.0",
        "spec": "0.2.0",
        "type": "version"
      },
      "/Users/dliu/go_work/src/github.com/apache/incubator-openwhisk-wskdeploy/tests/src/integration/zipaction/actions/cat"
    ]
  ],
  "_from": "cat@0.2.0",
  "_id": "cat@0.2.0",
  "_inCache": true,
  "_location": "/cat",
  "_npmUser": {
    "name": "mafintosh",
    "email": "mathiasbuus@gmail.com"
  },
  "_npmVersion": "1.4.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cat@0.2.0",
    "scope": null,
    "escapedName": "cat",
    "name": "cat",
    "rawSpec": "0.2.0",
    "spec": "0.2.0",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/cat/-/cat-0.2.0.tgz",
  "_shasum": "fd850cda7d4162e6904f33b7fcf743b1243fd434",
  "_shrinkwrap": null,
  "_spec": "cat@0.2.0",
  "_where": "/Users/dliu/go_work/src/github.com/apache/incubator-openwhisk-wskdeploy/tests/src/integration/zipaction/actions/cat",
  "author": {
    "name": "Mathias Buus Madsen",
    "email": "mathiasbuus@gmail.com"
  },
  "bin": {
    "cat": "bin.js"
  },
  "dependencies": {},

=======================================================================
==./tests/usecases/api-gateway/simple_api_manifest.yaml
=======================================================================
packages:
  whiskbot:
      version: 1.0
      license: Apache-2.0
      actions:
          fire:
            function: actions/fire/index.js
            inputs:
              triggerName: trgger1
              type: string
            exposedUrl: post/whiskbot/slack-event/

=======================================================================
==./tests/usecases/badyaml/deployment.yaml
=======================================================================
Application:
  name: testapp
  namespace: _
  version: 1.0
  packages:
    kafka:
    iputs:
      kafka_rest_url: https://kafka-rest-prod01.messagehub.services.us-south.bluemix.net:443
      topic: out-topic
    triggers:
      kafka-trigger:
        inputs:
          isJSONData: true
          topic: in-topic

=======================================================================
==./tests/usecases/badyaml/manifest.yaml
=======================================================================
packages:
  kafka:
      version: 1.0
      license: Apache-2.0
      inputs:
      api_key: string
        kafka_rest_url: string
        topic: string

=======================================================================
==./tests/usecases/dependency/README.md
=======================================================================
# Dependent Packages with `wskdeploy` 

`wskdeploy` supports dependencies where it allows you to declare other OpenWhisk
packages that your application or project (manifest) is dependent on. With declaring
dependent packages, `wskdeploy` supports automatic deployment of those dependent
packages.

`wskdeploy` classifies `dependencies` into two different categories:

### GitHub Dependency

Any package with `manifest.yaml` and/or `deployment.yaml` can be treated as
a dependent package and can be specified in `manifest.yaml` with the following
`dependencies` section:

```yaml
dependencies:
    hellowhisk:
        location: github.com/apache/incubator-openwhisk-test/packages/hellowhisk
```

where `hellowhisk` is an external package whose source code is located in
GitHub repo under https://github.com/apache/incubator-openwhisk-test/. When we
deploy our application, `hellowhisk` will be deployed based on the manifest and
deployment files located in the folder `packages/hellowhisk`.

In case of having multiple dependencies on the same package or customizing
package name, we can define `manifest` with:

```yaml
dependencies:
    hellowhisk:
        location: github.com/apache/incubator-openwhisk-test/packages/hellowhisk
    myhelloworlds:
        location: github.com/apache/incubator-openwhisk-test/packages/helloworlds
```

### Package Binding

Any package binding with external services like cloudant, message hub, etc
can be specified in `manifest.yaml` with:

```yaml
dependencies:
    cloudant-package-binding:
        location: /whisk.system/cloudant
        inputs:
            username: $CLOUDANT_USERNAME
            password: $CLOUDANT_PASSWORD
            host: ${CLOUDANT_USERNAME}.cloudant.com

=======================================================================
==./tests/usecases/dependency/manifest.yaml
=======================================================================
packages:
    dependency-demo:
        dependencies:
            hellowhisk:
                location: github.com/apache/incubator-openwhisk-test/packages/hellowhisk
            myhelloworlds:
                location: github.com/apache/incubator-openwhisk-test/packages/helloworlds
            cloudant-package-binding:
                location: /whisk.system/cloudant
                inputs:
                    username: $CLOUDANT_USERNAME
                    password: $CLOUDANT_PASSWORD
                    host: ${CLOUDANT_USERNAME}.cloudant.com
        sequences:
            hello-series:
                actions: hellowhisk/greeting, hellowhisk/httpGet, myhelloworlds/hello-js
        triggers:
            github-trigger:
            cloudant-binding-trigger:
                    source: cloudant-package-binding/changes
                    inputs:
                        dbname: $CLOUDANT_DATABASE
        rules:
            github-rule:
                trigger: github-trigger
                action: hello-series
            cloudant-binding-Rule:
                trigger: cloudant-binding-trigger
                action: cloudant-package-binding/read

=======================================================================
==./tests/usecases/github/README.md
=======================================================================
# Using GitHub Package with `wskdeploy`

The [GitHub usecase](https://github.com/pritidesai/incubator-openwhisk-wskdeploy/tree/master/tests/usecases/github) demonstrates how to build an OpenWhisk app to display github commit messages using `wskdeploy`.

OpenWhisk comes with a [GitHub package](https://github.com/apache/incubator-openwhisk-catalog/blob/master/packages/github/README.md) which can be used to run GitHub APIs. For our app to display github commits, we need:
 
- [manifest.yaml](https://github.com/apache/incubator-openwhisk-wskdeploy/blob/master/tests/usecases/github/manifest.yaml)
- [deployment.yaml](https://github.com/apache/incubator-openwhisk-wskdeploy/blob/master/tests/usecases/github/deployment.yaml)
- [Action File](https://github.com/apache/incubator-openwhisk-wskdeploy/blob/master/tests/usecases/github/src/print-github-commits.js)

All you have to do is add your own credentials in `deployment.yaml` to deploy this app.

```yaml
GitHubWebhookTrigger:
    inputs:
        username: <username>  # replace it with your GitHub username
        repository: <repo>    # replace it with your repo eg. apache/incubator-openwhisk-wskdeploy
        accessToken: <token>  # replace it with token which has access to the specified repo
        events: push          # push for commits
```

### Step 1: Deploy

Deploy it using `wskdeploy`:

```
wskdeploy -m tests/usecases/github/manifest.yaml -d tests/usecases/github/deployment.yaml
```

### Step 2: Verify

```
$ wsk package get GitHubCommits
$ wsk trigger get GitHubWebhookTrigger 
$ wsk rule get rule-for-github-commits 
```
### Step 3: Run

Push a sample commit to your github repo and you will see `print-github-commits` is activated:

```
Activation: print-github-commits (28f)
[
    "2017-09-01T19:08:38.46838161Z  stdout: Display GitHub Commit Details for GitHub repo:  https://github.com/your-repo",
    "2017-09-01T19:08:38.468756344Z stdout: Bob Smith added code changes with commit message: Updating README to appear on openwhisk",
    "2017-09-01T19:08:38.46877569Z  stdout: Commit logs are:",
    ...
]
```

=======================================================================
==./tests/usecases/github/deployment.yaml
=======================================================================
project:
    name: AppToPrintGitHubCommits
    packages:
        GitHubCommits:
            actions:
                print-github-commits:
            triggers:
                GitHubWebhookTrigger:
                    inputs:
                        username: <username>  # replace it with your GitHub username
                        repository: <repo>    # replace it with your repo eg. apache/incubator-openwhisk-wskdeploy
                        accessToken: <token>  # replace it with token which has access to the specified repo
                        events: push          # push for commits

=======================================================================
==./tests/usecases/github/manifest.yaml
=======================================================================
packages:
    GitHubCommits:
        actions:
            print-github-commits:
                location: src/print-github-commits.js
                runtime: nodejs:6
        triggers:
            GitHubWebhookTrigger:
                feed: /whisk.system/github/webhook
        rules:
            rule-for-github-commits:
                action: print-github-commits
                trigger: GitHubWebhookTrigger

=======================================================================
==./tests/usecases/slack/README.md
=======================================================================
# Using Slack Package with `wskdeploy`

The [Slack usecase](https://github.com/pritidesai/incubator-openwhisk-wskdeploy/tree/master/tests/usecases/slack) demonstrates how to build an OpenWhisk app to post a sample message to slack every hour using `wskdeploy`.

OpenWhisk comes with a [Slack package](https://github.com/apache/incubator-openwhisk-catalog/blob/master/packages/slack/README.md) which can be used to post messages to slack. For our app to post hourly messages, we need:
 
- [manifest.yaml](https://github.com/apache/incubator-openwhisk-wskdeploy/blob/master/tests/usecases/slack/manifest.yaml)
- [deployment.yaml](https://github.com/apache/incubator-openwhisk-wskdeploy/blob/master/tests/usecases/slack/deployment.yaml)
- [Action File](https://github.com/apache/incubator-openwhisk-wskdeploy/blob/master/tests/usecases/slack/src/post-to-slack.js)

All you have to do is export few environment variables with your slack webhook settings in `deployment.yaml` to deploy this app. You can create a new incoming webhook by following step by step instructions from [here](https://github.com/apache/incubator-openwhisk-GitHubSlackBot/blob/master/docs/add-webhook-to-slack.md).

```yaml
    dependencies:
        slack-package-to-post-messages:
            location: /whisk.system/slack
            inputs:
                username: $SLACK_USERNAME 
                url: $SLACK_URL
                channel: $SLACK_CHANNEL
```

### Step 1: Deploy

Deploy it using `wskdeploy`:

```
wskdeploy -m tests/usecases/slack/manifest.yaml -d tests/usecases/slack/deployment.yaml
```

### Step 2: Verify

```
$ wsk package get SlackPackage
$ wsk package get slack-package-to-post-messages
$ wsk trigger get everyhour 
$ wsk rule get post-to-slack-every-hour 
```
### Step 3: Run

Fire the `everyhour` trigger and notice a new message on your slack channel:

```
Activation: post-to-slack (9909dd5229e84526bff9902a2cd860df)
[
    "2017-09-12T23:05:17.17872899Z  stdout: Hello from WskDeploy!",
    "2017-09-12T23:05:17.549177677Z stdout: Posted message to slack"
]
```

=======================================================================
==./tests/usecases/slack/deployment.yaml
=======================================================================
project:
    name: AppToPostToSlack
    packages:
        SlackPackage:
            actions:
                post-to-slack:
                    inputs:
                        message: "Hello from WskDeploy!"
                        slack_package: slack-package-to-post-messages
            triggers:
                everyhour:
                    inputs:
                        cron: "0 */1 * * *"

=======================================================================
==./tests/usecases/slack/manifest.yaml
=======================================================================
packages:
    SlackPackage:
        dependencies:
            slack-package-to-post-messages:
                location: /whisk.system/slack
                inputs:
                    username: $SLACK_USERNAME
                    url: $SLACK_URL
                    channel: $SLACK_CHANNEL
        actions:
            post-to-slack:
                function: actions/post-to-slack.js
                runtime: nodejs:6
                inputs:
                    message:
                        type: string
                        description: message to post on slack
                    slack_package:
                        type: string
                        description: slack package name
        triggers:
            everyhour:
                feed: /whisk.system/alarms/alarm
        rules:
            post-to-slack-every-hour:
                action: post-to-slack
                trigger: everyhour


=======================================================================
==./tests/usecases/triggerrule/README.md
=======================================================================
# TriggerRule use case for wskdeploy

### Package description

This Package named `triggerrule` includes:
- An action named "greeting". It accepts two parameters "name" and "place" and will return a greeting message "Hello, name from place!"
- A trigger named as "locationUpdate"
- A rule named "myRule" to associate the trigger with the action.

### How to deploy and test

#### Step 1. Deploy the package.

```
$ wskdeploy -p tests/usecases/triggerrule
```

#### Step 2. Verify the action is installed.

```
$ wsk action list

{
  "name": "greeting",
  "publish": false,
  "annotations": [{
    "key": "exec",
    "value": "nodejs:6"
  }],
  "version": "0.0.1",
  "namespace": "<namespace>/triggerrule"
}
```

#### Step 3. Verify the action's last activation (ID) before invoking.

```
$ wsk activation list --limit 1 greeting

activations
3b80ec50d934464faedc04bc991f8673 greeting
```

#### Step 4. Invoke the trigger

```
$ wsk trigger fire locationUpdate --param name Bernie --param place "Washington, D.C."

ok: triggered /_/locationUpdate with id 5f8f26928c384afd85f47281bf85b302
```

=======================================================================
==./tests/usecases/triggerrule/deployment.yml
=======================================================================
application:
  name: AppWithTriggerRule

  packages:
    triggerrule:
      actions:
        greeting:
          inputs:
            name: Bernie
            place: DC

=======================================================================
==./tests/usecases/triggerrule/manifest.yml
=======================================================================
packages:
  triggerrule:
      version: 1.0
      license: Apache-2.0
      actions:
        greeting:
          version: 1.0
          function: src/greeting.js
          runtime: nodejs:6
          inputs:
            name: string
            place: string
          outputs:
            payload: string
      triggers:
        locationUpdate:
      rules:
        myRule:
          trigger: locationUpdate
          action: greeting


=======================================================================
==./tools/travis/docker/Dockerfile
=======================================================================
FROM openwhisk/nodejs6action

RUN apt-get update \
  && apt-get install -y git \
  && npm install --save simple-git js-yaml

COPY wskdeploy /nodejsAction/

=======================================================================
==./wski18n/README.md
=======================================================================
# How to generate the file i18n_resources.go for internationalization

As a contributor to wskdeploy, the file *i18n_resources.go* needs to regenerated,
when you add or change any localized message.

### Install go-bindata
In order to generate i18n_resources.go, you need to install go-bindata first:

```
$ go get -u github.com/jteeuwen/go-bindata/...
```

### Generate i18n_resources.go
Then, go the HOME directory of wskdeploy and run the following command:

```
$ $GOPATH/bin/go-bindata -pkg wski18n -o wski18n/i18n_resources.go wski18n/resources;
```

Finally, add the default ASF license header to i18n_resources.go. Since each file of
source code starts with the ASF license header, you need to add it to i18n_resources.go
each time it is regenerated. You can find this license header in any other file of source
code, e.g. i18n.go.

=======================================================================
==./wski18n/i18n_resources.go
=======================================================================
// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte

=======================================================================
==./wski18n/resources/de_DE.all.json
=======================================================================

=======================================================================
==./wski18n/resources/en_US.all.json
=======================================================================
[
  {
    "id": "msg_prefix_error",
    "translation": "Error"
  },
  {
    "id": "msg_prefix_info",
    "translation": "Info"
  },
  {
    "id": "msg_prefix_success",
    "translation": "Success"
  },
  {
    "id": "msg_prefix_warning",
    "translation": "Warning"
  },
  {
    "id": "msg_cmd_desc_long_publish",
    "translation": "Publish a package to the registry set in ~/.wskprops."
  },
  {
    "id": "msg_cmd_desc_long_report",
    "translation": "Reports on deployed entities (i.e., Packages, Actions, Triggers, Rules, etc.) as well as recent Activations in the specified namespace."
  },
  {
    "id": "msg_cmd_desc_long_root",
    "translation": "A tool to deploy, undeploy and sync openwhisk packages using a manifest and optional deployment files using YAML."
  },
  {
    "id": "msg_cmd_desc_short_publish",
    "translation": "Publish a package to a registry."
  },
  {
    "id": "msg_cmd_desc_short_report",
    "translation": "Provides a summary report of what's been deployed in the specified namespace."
  },
  {
    "id": "msg_cmd_desc_short_root",
    "translation": "A tool set to help deploy your openwhisk packages using a manifest file."
  },
  {
    "id": "msg_cmd_desc_short_add",
    "translation": "Add an action, feed, trigger or rule to the manifest"
  },
  {
    "id": "msg_cmd_desc_short_add_entity",
    "translation": "Add a/an {{.key}} to the manifest file"
  },
  {

=======================================================================
==./wski18n/resources/es_ES.all.json
=======================================================================

=======================================================================
==./wski18n/resources/fr_FR.all.json
=======================================================================
[
  {
    "id": "bypass certificate checking",
    "translation": "Some translation in French"
  }
]

=======================================================================
==./wski18n/resources/it_IT.all.json
=======================================================================

=======================================================================
==./wski18n/resources/ja_JA.all.json
=======================================================================

=======================================================================
==./wski18n/resources/ko_KR.all.json
=======================================================================

=======================================================================
==./wski18n/resources/pt_BR.all.json
=======================================================================

=======================================================================
==./wski18n/resources/zh_Hans.all.json
=======================================================================

=======================================================================
==./wski18n/resources/zh_Hant.all.json
=======================================================================
